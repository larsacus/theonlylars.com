<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | The Only Lars]]></title>
  <link href="http://theonlylars.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://theonlylars.com/"/>
  <updated>2017-02-15T00:42:28-06:00</updated>
  <id>http://theonlylars.com/</id>
  <author>
    <name><![CDATA[Lars Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rapid Content Prototyping With PlaceKit]]></title>
    <link href="http://theonlylars.com/blog/2013/07/01/rapid-development-with-placekit/"/>
    <updated>2013-07-01T08:00:00-05:00</updated>
    <id>http://theonlylars.com/blog/2013/07/01/rapid-development-with-placekit</id>
    <content type="html"><![CDATA[<p>Last week I open-sourced <a href="https://github.com/mutualmobile/MMProgressHUD">MMProgressHUD</a>, a small work-project that I’ve been working on for what seems like an eternity. I alluded in my last post that I was also releasing a personal project later in the week. I went ahead and open-sourced that project which I’ve been calling “<a href="https://github.com/larsacus/PlaceKit">PlaceKit</a>” for the Objective-C “<a href="https://objectivechackathon.appspot.com">Back On the Map</a>” hackathon this past Saturday.</p>

<h2 id="what-is-placekit">What is PlaceKit?</h2>
<p>Think of PlaceKit as a central, lightweight, dependency-less library for all of your content, placeholder, test data and random numerical needs that you might run into during prototyping or in the early phases of production development.</p>

<p>Let’s go through a couple of scenarios that you might find yourself needing PlaceKit:</p>

<ol>
  <li>You want to try something out fast, but need some content to show how it might look with real text or images</li>
  <li>You want to create a demo application for some particular widget you are working on, and need a set of fake data to display. Ditto for needing randomized data and geometry for creating random views or random offsets.</li>
  <li>You are working on a production app, but the server API is not ready yet, so you now have to come up with a large dataset of fake data to populate a fake database that you can use in your application until it is ready.</li>
</ol>

<p>These are the primary scenarios I built PlaceKit to make easier. We all know about using lorem ipsum, but when we need it, we typically will open up our favorite browser, google “lorem ipsum generator” and then copy/paste the text into the appropriate place we would like it to show up. This is all well and great, but it really isn’t scalable, isn’t randomized and also won’t simulate fetching from the network. This scenario is also true for images.
<!-- more --></p>

<h2 id="what-does-it-do">What Does it Do?</h2>
<p>It basically saves you time. If you don’t like to save time, then feel free to not use it. It will also add a little more life into your app in the early stages of development or when you’re just trying something new out and need some basic data to get you by. PlaceKit can also add a little variety into your placeholders - developers all get bored occasionally. If you want the generic grey image placeholders, PlaceKit has those. If you would to motivate your designers to get you assets with hideous images of meat- or kitten-based pixels, then PlaceKit also has that.</p>

<p>My favorite features of PlaceKit are the geometrical and random numerical APIs: These APIs will give you easy access to random geometries like random rects, random points or a random point enclosed in a given rect. The numerical APIs will give you incredibly easy access to random numerical values such as random percentages, random float in a given range, or random phone numbers.</p>

<p>If you have AFNetworking already integrated into your project, or simply want the ease of a built-in category on UIImageView, PlaceKit also has a wrapper around the UIImageView+AFNetworking category for the image APIs. This will enable you to easily and asynchronously request placeholder images of a given type without the need for the block-based APIs.</p>

<h2 id="interested">Interested?</h2>
<p>If you are interested in the above, have suggestions on how to improve PlaceKit or simply just want to peek under the hood, you can check out the source available on GitHub <a href="https://github.com/larsacus/PlaceKit">here</a>. Full information on what PlaceKit is capable of is fully documented in the header files <a href="https://github.com/larsacus/PlaceKit/blob/master/PlaceKit/PlaceKit.h">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Twitter #music's EQ Slider]]></title>
    <link href="http://theonlylars.com/blog/2013/05/14/rebuilding-twitter-number-musics-eq-slider/"/>
    <updated>2013-05-14T20:55:00-05:00</updated>
    <id>http://theonlylars.com/blog/2013/05/14/rebuilding-twitter-number-musics-eq-slider</id>
    <content type="html"><![CDATA[<p>Semi-recently, Twitter came out with a cool new music app to discovery new music on (get ready for it) Twitter. They aptly named their new chicklet “#music”. Visually, <a href="https://itunes.apple.com/us/app/twitter-music/id625541612?mt=8">#music</a> is a very, <em>very</em> cool app. Everything is custom: transitions, collection views, collection view selection animations, media player controls, and one very cool volume slider. If you don’t have an Rdio or Spotify subscription, you probably don’t see anything cool about the media player’s volume slider, but when you have one of the aforementioned subscriptions, the slider turns into a full-on 2-channel equalizer. It’s <em>very</em> cool.</p>

<p>So I had to build it - and now I’m going to show you how I built it so you can build something similar. This <em>isn’t</em> a full-on tutorial, but some generics behind building it with some code samples.</p>

<h2 id="larsbar">LARSBar</h2>
<p>The final product I’ve created is available as <a href="https://github.com/larsacus/LARSBar"><code>LARSBar</code> on GitHub</a> under the MIT license. Ignore the name. Seriously, despite trying to move away from my name as a prefix, my friends at work penned the name for this control when I showed it to them, and I couldn’t come up with anything better.</p>

<h2 id="design">Design</h2>
<p>When I first start a new UI component. I take a step back and look at the big picture of what it is I’m going to be building. This is what we’re going to be building if you haven’t seen the app:</p>

<p>A Screenshot of Twitter’s EQ Volume Slider:</p>

<p><img class="center" src="/images/larsbar/colored.png"></p>

<p>Before I begin, I ask myself a couple of questions to help me plan and not waste time (note this is just implementation, designing a component involves a whole different set of usability questions):
<!-- more --></p>

<h3 id="questions">Questions</h3>
<ol>
  <li>What is this piece of UI doing?</li>
  <li>How is this UI going to be used?</li>
  <li>Does this control look like anything that has been done before?</li>
  <li>If yes, can you use that thing to make your life easier?</li>
</ol>

<p>In our case, this particular piece of UI is going to be both accepting values for the volume from the user (and be able to be set programmatically) and accepting values for the EQ level for two channels. Also, this control looks strikingly similar to your standard <code>UISlider</code> that Apple has already built and extensively tested. So we’re going to try and reuse <code>UISlider</code> in order to make our lives a little easier.</p>

<p>If you look closely at Twitter’s version, I don’t think they are using a <code>UISlider</code> subclass. You can test this by grabbing the slider thumb grabber and moving it slowly back and forth. You’ll notice the slider thumb stutter even when you move it slowly. <code>UISlider</code> does not do that, so we’re going to be using <code>UISlider</code> as our base. <code>UISlider</code> also easily supports customization via <code>UIAppearance</code>. Double-win.</p>

<p>We also don’t need the slider EQ lights to respond to touch, so we are going to use the lightweight <code>CALayer</code> for each of the lights.</p>

<h3 id="construction-plan">Construction Plan</h3>
<p>In order to build this tool, there are some basic steps that need to happen in order to make this turn out the way we both functionally and visually want:</p>

<ol>
  <li>Layout two rows of discrete lights</li>
  <li>Update each individual light based on a “level” property</li>
  <li>Have different “levels” light up each light at a different color</li>
</ol>

<h2 id="positioning-the-lights">Positioning the Lights</h2>
<p>Our first step is to simply layout two rows of lights above and below the slider track. We’ll also need some way to store the layers being used for the lights themselves. We’ll create two storage arrays in order to store our created layers:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">leftChannelLightLayers</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">rightChannelLightLayers</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In order to populate and layout our layers, we’ll need to find a mechanism that will allow us to update our layout based on changes of the size of the control. <code>layoutSubviews</code> sounds like a perfect candidate for laying out our lights.</p>

<p>We first need to calculate how many lights that are going to fit horizontally in our layout. To do this, we’ll define a base size for our light layers, then take the width of the control and divide to get how many we need to layout:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">NSInteger</span> <span class="n">numberOfLights</span> <span class="o">=</span> <span class="n">floorf</span><span class="p">((</span><span class="n">CGRectGetWidth</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">)</span><span class="o">-</span><span class="n">TOLTargetLightPadding</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">TOLLightLayerSize</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="n">TOLTargetLightPadding</span><span class="p">));</span>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">totalWidth</span> <span class="o">=</span> <span class="n">CGRectGetWidth</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">);</span>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">lightWidth</span> <span class="o">=</span> <span class="n">TOLLightLayerSize</span><span class="p">.</span><span class="n">width</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CGFloat</span> <span class="n">actualPadding</span> <span class="o">=</span> <span class="n">roundf</span><span class="p">((</span><span class="n">totalWidth</span> <span class="o">-</span> <span class="n">numberOfLights</span><span class="o">*</span><span class="n">lightWidth</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">numberOfLights</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>TOL</code> prefixed variable are constants I have defined to customize the appearance of the control.</p>

<p>This gives us 1. the number of lights being laid out and 2. the actual padding that needs to exist between them. From here we can assign each layer the appropriate frame based on the above information (in this case we’re calculating the center point for each layer):</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="bp">NSUInteger</span> <span class="n">lightNum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">lightNum</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">numberOfLights</span><span class="p">;</span> <span class="n">lightNum</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">x</span> <span class="o">=</span> <span class="n">actualPadding</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">lightNum</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">lightWidth</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">lightNum</span> <span class="o">+</span> <span class="p">(</span><span class="n">lightWidth</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">centerLineHeight</span> <span class="o">=</span> <span class="n">CGRectGetHeight</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">bounds</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">yOffset</span> <span class="o">=</span> <span class="mf">2.f</span> <span class="o">+</span> <span class="n">TOLLightLayerSize</span><span class="p">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">CGPoint</span> <span class="n">topCenter</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">centerLineHeight</span> <span class="o">-</span> <span class="n">yOffset</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">CGPoint</span> <span class="n">bottomCenter</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">centerLineHeight</span> <span class="o">+</span> <span class="n">yOffset</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="nb">self</span> <span class="nl">layoutLightNumber</span><span class="p">:</span><span class="n">lightNum</span>
</span><span class='line'>                 <span class="nl">center</span><span class="p">:</span><span class="n">topCenter</span>
</span><span class='line'>           <span class="nl">storageArray</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">leftChannelLightLayers</span>
</span><span class='line'>            <span class="nl">totalLights</span><span class="p">:</span><span class="n">numberOfLights</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** layout bottom lights in the same way */</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>The method in this code block sets some properties on the layer based on its position in the array. The only thing it does here for positioning is set the layer’s <code>position</code> property to the <code>center</code> variable fed into the method. Much of what is going on inside <code>layoutLightNumber:center:storageArray:totalLights</code> are performance optimizations that you can check out in the full source if you’re interested.</p>

<h2 id="building-a-light">Building a Light</h2>
<p><img class="right" src="/images/larsbar/zoomed.png">
<img class="right" src="/images/larsbar/zoomed-inactive.png">
We have some more requirements for the light itself than we did for the layout. Each light needs to have a different glow color depending on where it is in the x-direction, so it needs to be dynamic. I would also like for the light to animate the change in light color when its state is changed. If you look at the Twitter #music app, you’ll also notice that the base color of the light when it is off is two different colors depending on if it is in front of or behind the slider thumb grabber.</p>

<p>A Screenshot of Twitter’s EQ Slider in the Inactive State:
<img class="center" src="/images/larsbar/darkened.png"></p>

<p>This would be very difficult and time-consuming to do with assets. So we’re going to build it using CoreGraphics.</p>

<h3 id="coregraphics">CoreGraphics!?</h3>
<p>Yes, CoreGraphics. Seriously, don’t run off - it’s going to be fine. Truth be told, I kind of cheated and used PaintCode for my initial graphics code. If you have never heard of <a href="http://www.paintcodeapp.com">PaintCode</a>, go to their site right now and download it. You can get a free trial that will let you use it for a limited time each session, but you can really learn a lot about CoreGraphics just by using the app.</p>

<p>In order to use CoreGraphics with our <code>CALayer</code> light, we’ll be overriding the <code>drawInContext:</code> method. It works exactly like <code>drawRect:</code> with one caveat if you would like to use UIKit methods to draw: you need to manually push the graphics context using <code>UIGraphicsPushContext(ctx)</code>.</p>

<p>The light itself consists of three distinct features:</p>

<ol>
  <li>The inactive light frame</li>
  <li>The inactive light’s base shadow (a 1/2-point down shadow)</li>
  <li>The glow of the light</li>
</ol>

<p>Each section is neatly commented and laid out for easy consumption:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/** Color Declarations &lt;em&gt;/</span>
</span><span class='line'><span class="cm">UIColor&lt;/em&gt; activeOffFill = nil;</span>
</span><span class='line'><span class="cm">if (self.lightState) {</span>
</span><span class='line'><span class="cm">    activeOffFill = self.glowColor;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">else if(self.isActive){</span>
</span><span class='line'><span class="cm">    activeOffFill = self.activeColor;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">else{</span>
</span><span class='line'><span class="cm">    activeOffFill = self.inactiveColor;</span>
</span><span class='line'><span class="cm">}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;/** Shadow Declarations &lt;em&gt;/</span>
</span><span class='line'><span class="cm">UIColor&lt;/em&gt; underStroke = underStrokeColor;</span>
</span><span class='line'><span class="cm">CGSize underStrokeOffset = CGSizeMake(0.f, 1.f/scale);</span>
</span><span class='line'><span class="cm">CGFloat underStrokeBlurRadius = 0;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;/** Light Frame Drawing &lt;em&gt;/</span>
</span><span class='line'><span class="cm">UIBezierPath&lt;/em&gt; lightFramePath = [UIBezierPath bezierPathWithOvalInRect:lightRect];</span>
</span><span class='line'><span class="cm">CGContextSaveGState(context);</span>
</span><span class='line'><span class="cm">CGContextSetShadowWithColor(context, underStrokeOffset, underStrokeBlurRadius, underStroke.CGColor);</span>
</span><span class='line'><span class="cm">[activeOffFill setFill];</span>
</span><span class='line'><span class="cm">[lightFramePath fill];</span>
</span><span class='line'><span class="cm">CGContextRestoreGState(context);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;[strokeColor setStroke];</span>
</span><span class='line'><span class="cm">lightFramePath.lineWidth = 1.f/scale;</span>
</span><span class='line'><span class="cm">[lightFramePath stroke];&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;/** Light Glow Drawing */</span>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">endRadius</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">lightState</span> <span class="o">?</span> <span class="n">MAX</span><span class="p">(</span><span class="n">floorf</span><span class="p">(</span><span class="n">width</span><span class="o">/</span><span class="mf">2.f</span><span class="p">),</span> <span class="n">floorf</span><span class="p">(</span><span class="n">height</span><span class="o">/</span><span class="mf">2.f</span><span class="p">))</span> <span class="o">:</span> <span class="mf">0.f</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">CGContextDrawRadialGradient</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">lightGlowGradient</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">CGPointMake</span><span class="p">(</span><span class="n">width</span><span class="o">/</span><span class="mf">2.f</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mf">2.f</span><span class="p">),</span> <span class="mf">0.f</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">CGPointMake</span><span class="p">(</span><span class="n">width</span><span class="o">/</span><span class="mf">2.f</span><span class="p">,</span> <span class="n">height</span><span class="o">/</span><span class="mf">2.f</span><span class="p">),</span> <span class="n">endRadius</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">kCGGradientDrawsBeforeStartLocation</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>A bonus for using CoreGraphics in this way with properties on the layer is that CoreAnimation will implicitly animate the change in state (you will most notice this with the glow color of the light). Whenever you change a property that is used to draw the state of the light in the above code, simply call <code>setNeedsDisplay</code> in order to redraw the content.</p>

<h2 id="remaining-details">Remaining Details</h2>
<p>This will get you started on implementing a custom EQ slider on your own. The remaining details to make this look like Twitter’s version include changing the color of each light depending on its horizontal position, determining which lights are active based on the position of the slider and optimizing the drawing to only redraw lights that have changed state. I’ll leave this as an exercise to the reader, or you can check out the final product that I implemented with all of the optimizations.</p>

<p>If you’re using <code>LARSBar</code> in an app, drop me a message <a href="https://twitter.com/theonlylars">on Twitter</a> and I’ll add it to the GitHub readme.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autolayout: To NIB or not to NIB]]></title>
    <link href="http://theonlylars.com/blog/2013/02/11/autolayout-to-nib-or-not-to-nib/"/>
    <updated>2013-02-11T19:39:00-06:00</updated>
    <id>http://theonlylars.com/blog/2013/02/11/autolayout-to-nib-or-not-to-nib</id>
    <content type="html"><![CDATA[<p>A coworker recently asked me at the end of last week what I thought, based on my experience on my last iOS 6-only project, would be the best approach to starting to learn and work with autolayout. He was specifically asking if he should bother working with xib files, or simply layout everything in code. He then asked that if he were to go with a xib file, what the best approach would be to balance the time/effort workflow for autolayout.</p>

<p>All of the below is 100% based on my experience on my last project that was iOS 6-only, where autolayout was extensively utilized.</p>

<h2 id="autolayout-layout-construction-priority">Autolayout Layout Construction Priority</h2>
<p>Apple states in all of their documentation the following order you should begin implementing autolayout:</p>

<ol>
  <li>Nib file</li>
  <li>Visual formatting language</li>
  <li>Individual constraints</li>
</ol>

<h2 id="to-nib">To NIB</h2>
<p>The priority above is, in my opinion, very dependent on what you are working on. If you have a pretty trivial layout that is simply being constrained based on something simple like an orientation change, then a xib file will probably be your best bet for a rapid layout that is unambiguous and doesn’t give you any issue during maintenance with very little effort.</p>

<p>Another very helpful feature of autolayout’s constraints is the fact that you can create an outlet to a single constraint. You can use this outlet to easily animate a change, change the constraints constant, or remove a constraint altogether without much additional effort. To animation a constraint change, simply update your constraint(s), call <code>-setNeedsLayout</code>, then call <code>-layoutIfNeeded</code> in an animation block. Very quick and easy.</p>

<h3 id="no-touching">No Touching</h3>
<p><a href="/images/no_touching.gif"><img class="right" src="/images/no_touching_static.jpg" width="300"></a> However, using xibs for autolayout starts to break down and become more time than it’s worth when you get into complex layouts that depend on cross-view constraints, constraints depending on a view’s content or complex constraint sets relating to many physically smaller views (the constraints simply become an absolute nightmare to <em>physically</em> click on and manage in the xib without screwing something else up).<!--more--> Couple this with the fact that a “feature” of auto layout nibs is to avoid ambiguous layouts. This means that Xcode will actually <em>add</em> constraints it “feels” are necessary for your layout despite you knowing better based on your semantic knowledge of the layout you’re trying to build. These constraints are <em>not</em> removable and thus, a huge nuisance.</p>

<p>Even if you do end up successfully laying out your complex auto-layout layout in a nib and get it to behave the way you want, it’s best to treat your xib file like George Bluth in prison and <em>never</em> touch that nib again. Any constraint that is touched could potentially be changed by Xcode because it thinks it knows better than you. You’ll then be back at square one trying to figure out which constraints’ priorities to change back to 1 to get your layout to behave the way you want. I hope you committed that xib into source control just now.</p>

<h2 id="not-to-nib">Not to NIB</h2>
<p>It’s at this point that writing your layouts using the visual formatting language<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> becomes quicker and less error-prone, even at the expense of having to do it in code. A layout you build in code is the same layout <em>every</em> time the code is run. It’s like this because you built it. Only you know the semantics of the layout you are trying to construct. The code is not going to do anything you don’t tell it to - you just need to practice and learn to get better at telling it what to do. Use the visual formatting language and you’ll eventually make it out alive with a rock-solid layout that is much easier to maintain than the same complex layout in you would have had in your nib file.</p>

<h2 id="so-what-should-i-use">So What Should I Use?</h2>
<p>Some general thoughts to consider when learning to work with autolayout:</p>

<h3 id="always-use-nibs-when-possible">Always Use NIBs When Possible</h3>
<p>Don’t let interface builder get the best of you. At the first sign of interface builder throwing a fit with your layout and changing things from under your feet - switch to code. Autolayout really is hard, but interface builder sometimes makes it unnecessarily so. Always use a xib when you can. Even if you can only use the nib for a part of the layout, do the complex layout in code and leave the simple layout to the xib if you so choose. The xib is supposed to make your life easier, not more difficult.</p>

<h3 id="use-the-vfl">Use the VFL</h3>
<p>Use autolayout’s visual formatting language at the first sign of complexity or resistance from interface builder that is impeding your productivity.</p>

<h3 id="hybrid-approach">Hybrid Approach</h3>
<p>For complex layouts, simply omit that view heirarchy from the nib if it’s only a subset of the nib.</p>

<h3 id="dont-use-autolayout">Don’t Use Autolayout</h3>
<p>Sometimes you really may not need autolayout. Sometimes the simplest approach is the correct one.</p>

<h3 id="autolayout-is-hard">Autolayout is Hard</h3>
<p>Yes, autolayout is hard. You’ll often find me comparing the shape of autolayout’s learning curve to that of the face of a cliff. I took it on myself to try and learn as much as I could about autolayout when I got back from WWDC last year. I was then fortunate to be one of a few people to actually get to use iOS 6 APIs in a production environment with a project at Mutual Mobile before iOS 6 was even out of beta. It is still the number one thing people come to me asking questions about at work - for good reason.</p>

<p>Many blog posts have been written by other developers on the nuances of autolayout. Bottom line - autolayout is really hard. It is the only API I can think of that is more closely related to an art than science. One that is only mastered with practice and many hours diagnosing ambiguous and over-constrained layouts in the debugger. The only true advice I could give another is this: “Autolayout is hard. Practice often if you care to learn it.”</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>This includes the <a href="https://developer.apple.com/library/mac/#documentation/AppKit/Reference/NSLayoutConstraint_Class/NSLayoutConstraint/NSLayoutConstraint.html#//apple_ref/occ/clm/NSLayoutConstraint/constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:">individual constraint APIs</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoapods: Creating a Pod Spec]]></title>
    <link href="http://theonlylars.com/blog/2013/01/20/cocoapods-creating-a-pod-spec/"/>
    <updated>2013-01-20T14:58:00-06:00</updated>
    <id>http://theonlylars.com/blog/2013/01/20/cocoapods-creating-a-pod-spec</id>
    <content type="html"><![CDATA[<p><em>Update 4-15-2013: Updated for changes that came with v0.18.x and v0.17 since this page is now linked to on <a href="http://docs.cocoapods.org/guides/index.html">cocoapods.org</a>.</em></p>

<p><em>Note: Cocoapods is all very new and in rapid development (currently v0.18.1 as of this update), if you are in the know and any of the below is wrong or incorrect, please let me know and I’ll change it.</em></p>

<p><img class="left" src="/images/posts/cocoapods/cocoapods_logo.png" width="200" height="200">If you’re reading this there is a good chance you have at least heard of <a href="http://cocoapods.org">Cocoapods</a>. For the uninitiated, Cocoapods is a dependency manager for Mac and iOS projects built on Ruby and based on the Ruby community’s “<a href="http://gembundler.com">rubygem bundler</a>”. Each “pod” has a “spec” that is utilized in order to know how to integrate a given component with your project and resolve any dependencies your project may have with other libraries. I’ll be referring to these from here on out as either a “podspec” or more simply - a “spec”.</p>

<p>Since I’ve had some trouble easily writing my podspecs in the past (and have run into poorly-tested specs in the specs repository), I have put together a collection of knowledge on the things I have learned while building and testing my podspecs.<!-- more --></p>

<p>I’m assuming that you already have cocoapods installed, and that you are looking to build and test a new <code>.podspec</code> file for a component.</p>

<p>Let’s get started!</p>

<h2 id="table-of-contents">Table of Contents</h2>
<ul id="markdown-toc">
  <li><a href="#table-of-contents" id="markdown-toc-table-of-contents">Table of Contents</a></li>
  <li><a href="#what-is-a-spec" id="markdown-toc-what-is-a-spec">What is a Spec?</a></li>
  <li><a href="#basic-requirements" id="markdown-toc-basic-requirements">Basic Requirements</a>    <ul>
      <li><a href="#semantic-versioning" id="markdown-toc-semantic-versioning">Semantic Versioning</a></li>
      <li><a href="#dependencies" id="markdown-toc-dependencies">Dependencies</a></li>
      <li><a href="#frameworks" id="markdown-toc-frameworks">Frameworks</a></li>
    </ul>
  </li>
  <li><a href="#construction" id="markdown-toc-construction">Construction</a>    <ul>
      <li><a href="#hashes" id="markdown-toc-hashes">Hashes</a></li>
      <li><a href="#tags-and-unversioned-repositories" id="markdown-toc-tags-and-unversioned-repositories">Tags and Unversioned Repositories</a></li>
      <li><a href="#version-simplification" id="markdown-toc-version-simplification">Version Simplification</a></li>
    </ul>
  </li>
  <li><a href="#completing-your-spec" id="markdown-toc-completing-your-spec">Completing Your Spec</a>    <ul>
      <li><a href="#help" id="markdown-toc-help">Help</a></li>
      <li><a href="#learn-by-example" id="markdown-toc-learn-by-example">Learn By Example</a></li>
    </ul>
  </li>
  <li><a href="#testing" id="markdown-toc-testing">Testing</a></li>
  <li><a href="#spec-lint" id="markdown-toc-spec-lint">Spec Lint</a></li>
  <li><a href="#in-project-functional-testing" id="markdown-toc-in-project-functional-testing">In-Project (Functional) Testing</a></li>
  <li><a href="#subspecs" id="markdown-toc-subspecs">Subspecs</a>    <ul>
      <li><a href="#defining-a-subspec" id="markdown-toc-defining-a-subspec">Defining a Subspec</a></li>
      <li><a href="#final-product" id="markdown-toc-final-product">Final Product</a></li>
      <li><a href="#depending-on-a-subspec" id="markdown-toc-depending-on-a-subspec">Depending on a Subspec</a></li>
    </ul>
  </li>
  <li><a href="#releasing" id="markdown-toc-releasing">Releasing</a>    <ul>
      <li><a href="#forkingcloning" id="markdown-toc-forkingcloning">Forking/Cloning</a></li>
      <li><a href="#pull-request" id="markdown-toc-pull-request">Pull Request</a></li>
    </ul>
  </li>
</ul>

<h2 id="what-is-a-spec">What is a Spec?</h2>
<p>The basis behind how cocoapods is able to function is on a project’s “podspec”. Podspecs are created by maintainers of a project (or sometimes just other developers who want to use a component as a pod) and submitted to a public repository of specs in an organized git repository on github.</p>

<p>Specs identify everything about a library or component that needs to be performed before you can properly use it in your project. This includes everything from supported platform, ARC-readiness and required frameworks to other C flags that might need to be switched on.</p>

<h2 id="basic-requirements">Basic Requirements</h2>
<p>At a minimum, your spec needs to have the following attributes defined in order to be valid. If you think about it, if any one of these were missing, the spec itself wouldn’t really make sense:</p>

<ul>
  <li>Component name</li>
  <li>Semantic version number</li>
  <li>Platform</li>
  <li>Summary</li>
  <li>Author info dictionary</li>
  <li>Component homepage</li>
  <li>License</li>
  <li>Source location</li>
  <li>Source files list</li>
  <li>Any component dependencies*</li>
  <li>Required apple frameworks*</li>
</ul>

<h3 id="semantic-versioning">Semantic Versioning</h3>
<p>Cocoapods <a href="https://github.com/CocoaPods/CocoaPods/wiki/Contributing-to-the-master-repo"><em>highly</em> suggests</a> using (as in - don’t <em>not</em> do it) <a href="http://semver.org">semantic versioning</a> to version your cocoapods. Without semantic versioning, it becomes much more difficult if not impossible to resolve some cross-dependencies between similar pod dependencies in your project, if any exist. All that was very complicated to say - use semantic versioning (e.g. “v1.1.0”). Tag your code in your repository with a tag corresponding to the version number of your component (for v3.0.0 of your component, tag your code <code>3.0.0</code>).</p>

<h3 id="dependencies">Dependencies</h3>
<p>The dependency line is technically optional if your component does not rely on any external pod.</p>

<h3 id="frameworks">Frameworks</h3>
<p>The frameworks line is also technically optional if your pod only uses the standard apple frameworks.</p>

<h2 id="construction">Construction</h2>
<p>A Podspec is <a href="https://github.com/CocoaPods/CocoaPods/wiki/A-pod-specification">constructed by building a new <code>Spec</code> object</a> using a ruby “block”. My ruby-fu is still pretty green, so I won’t try and explain the ruby-ness of a podspec. To create a podspec using a block, we’re going to declare the following in a new file named <code>&lt;component_name&gt;.podspec</code>. Please don’t literally put the angle brackets in your file name:</p>

<p><figure class='code'><figcaption><span>AwesomeComponent.podspec </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># pod customization goes in here</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This creates a new <code>Spec</code> object that is included in the <code>Pod</code> library and inserts it into the local variable <code>s</code> for us to customize before it is returned. I’ve gone ahead and filled in some basic information for a spec I wrote for LARSAdController to demonstrate:</p>

<p><figure class='code'><figcaption><span>LARSAdController.podspec </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">name</span>         <span class="o">=</span> <span class="err">‘</span><span class="no">LARSAdController</span><span class="err">’</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">version</span>      <span class="o">=</span> <span class="err">‘</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="err">’</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">summary</span>      <span class="o">=</span> <span class="err">‘</span><span class="no">Lightweight</span> <span class="n">ad</span> <span class="n">mediation</span> <span class="k">for</span> <span class="n">iOS</span><span class="err">’</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">‘</span><span class="no">Lars</span> <span class="no">Anderson</span><span class="err">’</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="n">youremail</span><span class="vi">@here</span><span class="o">.</span><span class="n">com</span><span class="err">’</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:git</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">larsacus</span><span class="o">/</span><span class="no">LARSAdController</span><span class="o">.</span><span class="n">git</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:tag</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="err">’</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="err">‘</span><span class="no">Source</span><span class="o">/*.</span><span class="p">{</span><span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">}</span><span class="err">’</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">dependency</span>     <span class="err">‘</span><span class="no">AdMob</span><span class="err">’</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This will include all source files with file extensions <code>.h</code> &amp; <code>.m</code> in the <code>Source/</code> folder in the github repository <code>https://github.com/larsacus/LARSAdController.git</code> in the source tag <code>3.0.0</code> while also including the pod for the dependency of <code>AdMob</code>.</p>

<h3 id="hashes">Hashes</h3>
<p>If you’re unfamiliar with ruby, you’ll notice some interesting <code>{}</code> structures being assigned to variables like <code>source</code> and <code>author</code>. These structures are called “hashes” and they are exactly like your standard dictionary in objective-c:</p>

<p><code>key =&gt; value</code></p>

<p>For the <code>source</code> hash, the colon (<code>:</code>) before the key name is important. This <a href="http://rubylearning.com/satishtalim/ruby_hashes.html">defines things like :git and :tag as ruby “symbols”</a> that are defined within cocoapods.</p>

<h3 id="tags-and-unversioned-repositories">Tags and Unversioned Repositories</h3>
<p>There are other methods of specifying the location of source code instead of tags, but you should really be using tags to mark your code commit for your spec. If you are not the owner of the repository you are creating a spec for, <a href="https://github.com/CocoaPods/CocoaPods/wiki/Contributing-to-the-master-repo">file an issue with the repository</a> to request that a tag be made. If this doesn’t work, then you should specify the version of your podspec to begin at <code>0.0.1</code> to indicate that this pod’s spec is unmanaged. Should the owner finally get a tag, then you can update the podspec with the correct version with little fear of conflicting with your previously unmanaged podspec’s version.</p>

<p><em>Update 4-15-2013: You now cannot submit a pod to the podspec repository referencing a specific commit - you must specify a tag.</em></p>

<h3 id="version-simplification">Version Simplification</h3>
<p>Since this is just a ruby file, you can use all of the ruby tricks on any string in this file. To simplify our podspec for revving our version later, you can tell our <code>source</code> hash to use the podspec’s version as the repository’s tag to use using the <code>to_s</code> helper:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:git</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">larsacus</span><span class="o">/</span><span class="no">LARSAdController</span><span class="o">.</span><span class="n">git</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:tag</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">s</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="completing-your-spec">Completing Your Spec</h2>
<p>This is where writing a podspec gets a little complicated. The general example specs from the wiki are just fine, but when you start customizing your spec to the specific needs of your component or library, you can easily find yourself running to google with few available resources.</p>

<h3 id="help">Help</h3>
<p>For the majority of the issues you will run into when creating your podspec, the <a href="https://github.com/CocoaPods/CocoaPods/wiki/">cocoapods wiki</a> will have a page that will answer your question. Almost every issue I was having, I eventually found the answer to in the wiki. It could be a little better organized, but I really can’t complain too much since I haven’t submitted a pull request to fix it myself.</p>

<p>Since this original writing, a new sister project of CocoaPods  <a href="http://cocoadocs.org">cocoadocs.org</a> has been released that has a wealth of well-organized information available as well as documentation on every appledoc-documented Pod.</p>

<p>If you simply cannot find an answer anywhere, submit an issue on the <a href="https://github.com/CocoaPods/Specs/issues">Cocoapods/Specs</a> repository (not the Cocoapods/Cocoapods repo) and someone is usually knowledgable enough to figure out what you’re doing wrong or help you file a bug to fix the issue.</p>

<h3 id="learn-by-example">Learn By Example</h3>
<p>If you have a component or library that is built a specific way and you’re having an issue, try and find a similar component that is built like yours and try that Pod’s spec configuration. For instance, if your component is a static library, find a spec (like <a href="https://github.com/CocoaPods/Specs/blob/master/TestFlightSDK/1.2/TestFlightSDK.podspec">Testflight</a>) that is built utilizing a static library.</p>

<h2 id="testing">Testing</h2>
<p>I found that this step was by far the most difficult to perform. I was not about to simply deploy a podspec that I had not tested, so this left me not even wanting to build a podspec for my component. I’m going to spare you the workflow iterations I tried before arriving at what I believe to be the “correct” way to test your podspec.</p>

<p><em>I also understand that I am fully able to submit pull requests to modify the cocoapods wiki to make it more clear. This is something that I simply have not done, yet. This is way easier for now.</em></p>

<h2 id="spec-lint">Spec Lint</h2>
<p>The first step to testing your spec is to use cocoapods’ built-in “lint” tool to test for syntax compliance and minimum requirements. In your terminal prompt, run the lint tool on your podspec using:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pod spec lint “&lt;spec <span class="nv">location</span><span class="o">=</span><span class="s2">&quot;&quot;</span>&gt;/SpecName.podspec<span class="err">&quot;</span>
</span></code></pre></td></tr></table></div></figure></spec></p>

<p>If anything is <em>syntactically</em> wrong with your spec, it will show up here after running lint. Refer to the <a href="https://github.com/CocoaPods/CocoaPods/wiki">cocoapods wiki</a> if any errors or warnings come up.</p>

<p>As of CocoaPods v0.17, you can no longer submit pod specs to the spec repo when lint reports warnings.</p>

<h2 id="in-project-functional-testing">In-Project (Functional) Testing</h2>
<p>It’s <em>very</em> important to actually test your pod in a <em>fresh</em> project without any other configuration. Don’t be the guy that creates a spec, submits it, then you get a bunch of complaints because your spec doesn’t actually install properly when it’s installed. It’s also annoying to find a spec you can use, put it as a dependency on your project, only to find out it’s not configured properly. It looks bad on the cocoapods community when this happens.</p>

<p>Please functionally test your specs before submitting them:</p>

<ol>
  <li>Create a new empty xcode project</li>
  <li>Create your <code>Podfile</code></li>
  <li>Add your pod as a project dependency</li>
  <li>Specify local file path for new podspec</li>
</ol>

<p>This is where I had a huge issue testing my podspec. The trick I learned is to <a href="https://github.com/CocoaPods/CocoaPods/wiki/Dependency-declaration-options">specify a local file path</a> for your Podfile to look for your new podspec:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="err">‘</span><span class="no">LARSAdController</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="err">’</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="o">~</span><span class="sr">/Specs/</span><span class="no">LARSAdController</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now you can install and test your pod:</p>

<ol>
  <li>Install pod
    <ul>
      <li><code>pod install</code> (initial install)</li>
      <li><code>pod update</code> (subsequent installs)</li>
    </ul>
  </li>
  <li>Test to ensure your component works</li>
  <li>Rinse, repeat until component installs correctly</li>
</ol>

<h2 id="subspecs">Subspecs</h2>
<p>A cool feature of cocoapods is its ability for you to specify sub-components of your component to include. This will enable other developers to be able to a-la-carte choose which sub-components of your library to include in their project. This reduces the bloat, especially when only some parts of your project have dependencies on other large components.</p>

<p>Subspecs are totally optional in your podspec.</p>

<h3 id="defining-a-subspec">Defining a Subspec</h3>
<p>To define a <a href="https://github.com/CocoaPods/CocoaPods/wiki/The-podspec-format">subspec</a> in your spec file, define a <code>subspec</code> variable (?) on your spec variable - much like we did in creating the spec itself:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">subspec</span> <span class="err">‘</span><span class="n">iAds</span><span class="err">’</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="err">‘</span><span class="no">Source</span><span class="o">/</span><span class="n">iAds</span><span class="o">/*.</span><span class="p">{</span><span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">}</span><span class="err">’</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">dependency</span> <span class="err">‘</span><span class="no">LARSAdController</span><span class="o">/</span><span class="no">Core</span><span class="err">’</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">frameworks</span> <span class="o">=</span> <span class="err">‘</span><span class="no">QuartzCore</span><span class="err">’</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">weak_frameworks</span> <span class="o">=</span> <span class="err">‘</span><span class="no">AdSupport</span><span class="err">’</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Give your subspec a descriptive name, specify the source files to use, etc. In the above example, I have named this subspec ‘iAds’ since this will be including iAd functionality in with my pod. You’ll continue to customize the subspec in the same way that you customized your parent spec object.</p>

<p>As of CocoaPods v0.17, subspecs will <a href="https://github.com/CocoaPods/CocoaPods/blob/master/CHANGELOG.md#breaking">no longer inherit source files from the parent spec</a>. In order to retain the same functionality, simply add a new “base” subspec called “Core” that includes all of the base files for your implementation. If your “Core” files are the <em>only</em> files that you would like installed when users <em>do not</em> specify a subspec, you will need to add a <code>default_subspec</code> property on your podspec and specify your “Core” subspec:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">default_subspec</span> <span class="o">=</span> <span class="err">‘</span><span class="no">Core</span><span class="err">’</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">subspec</span> <span class="err">‘</span><span class="n">iAds</span><span class="err">’</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># define subspec here</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The above code block will <em>only</em> install the <code>Core</code> subspec when your pod is called out as a dependency when the user does not specify a subspec in their podfile. If you did not include the <code>default_subspec</code> property, then all subspecs would be installed by default.</p>

<p>There are some properties that are not allowed to be defined on a subspec and can only be defined on the parent spec. These “Top level attributes” are outlined on the <a href="https://github.com/CocoaPods/CocoaPods/wiki/The-podspec-format">podspec page</a> on the Cocoapods wiki.</p>

<p>Continue to create additional subspecs for however many sub-specifications that you need to create using the template:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">subspec</span> <span class="err">‘</span><span class="no">SubspecName</span><span class="err">’</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># Customize</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="final-product">Final Product</h3>
<p>In the end, you should have a podspec that looks a lot like mine does <a href="https://github.com/CocoaPods/Specs/blob/master/LARSAdController/3.0.0/LARSAdController.podspec">for LARSAdController</a>.</p>

<h3 id="depending-on-a-subspec">Depending on a Subspec</h3>
<p>To use the subspec in a Podfile, define the dependency like normal, but suffix it with a <code>/</code> and the subspec name:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="err">‘</span><span class="no">LARSAdController</span><span class="o">/</span><span class="n">iAds</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="releasing">Releasing</h2>
<p>Congratulations! You’ve now completed the hardest parts of constructing your podspec. This next part is easy as long as your podspec lints correctly and installs - which you’ve already tested, right? In order to contribute to the <a href="https://github.com/CocoaPods/Specs">Cocoapods/Specs</a> repository, you will need to clone the repo, add your spec and submit a pull request to have your spec added.</p>

<h3 id="forkingcloning">Forking/Cloning</h3>
<p>To add your spec to the list of podspecs, you will need to fork the <a href="https://github.com/CocoaPods/Specs">Cocoapods/Specs</a> repo using your own github account. If you have cloned a fork of the repository and haven’t committed to it even in the last 12 hours, you will want to update your repository by doing a <code>git pull</code> on your repo specifying the original remote location to pull the latest podspecs from. This repository gets updated quite frequently, so make sure you are up to date.</p>

<p>You will then need to clone the repository on your local machine and add your spec using the established file structure:</p>

<p><code>ProjectName/Version/ProjectName.podspec</code></p>

<p>So for the last release of LARSAdController, I put my latest podspec in <code>LARSAdController/3.0.0/LARSAdController.podspec</code> - one podspec per version folder.</p>

<p>Once this is added, you’ll want to add the files to git, commit, and push them back up to your own fork of the Specs repo.</p>

<h3 id="pull-request">Pull Request</h3>
<p>Once the podspec is committed and pushed to your fork on github, you can submit a new pull request to merge the changes you made in your fork to the master repository that cocoapods is pulling their spec library from.</p>

<p>The friendly, hard-working folks who actively work to get your components merged in will then make sure that everything is linted and working correctly (syntactically, but not functionally) before allowing your changes to be merged into the master specs branch.</p>

<p>If this succeeds, then your podspec will now be available for everyone to use in their own projects! Pat yourself on the back - it wasn’t all that bad, was it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stupid Easy iOS Ad Mediation with LARSAdController 3.0]]></title>
    <link href="http://theonlylars.com/blog/2013/01/10/stupid-easy-ads-with-larsadcontroller-3-dot-0/"/>
    <updated>2013-01-10T20:10:00-06:00</updated>
    <id>http://theonlylars.com/blog/2013/01/10/stupid-easy-ads-with-larsadcontroller-3-dot-0</id>
    <content type="html"><![CDATA[<h2 id="roots">Roots</h2>
<p>When I originally built LARSAdController, I was building it to fulfill a very specific purpose for my first app (Droid Light): leverage a singleton to serve a single ad instance for iAds using best practices, and serve AdMob ads as a backup when iAds (stellar) inventory ran dry. Since then, I’ve expanded it to support multiple devices, as well as multiple orientations, all while being super-easy to integrate.</p>

<h2 id="section">3.0</h2>
<p>Version 3.0 now supports all of the things that the old version did, but now allows you much more flexibility and freedom in how you would like your ads to be used.</p>

<h3 id="major-changes-from-v2x">Major Changes from v2.x</h3>

<p>A detailed changelog of what has changed can be found in the <a href="/blog/2012/12/15/larsadcontroller-3-dot-0-rc/">LARSAdController 3.0 release-candidate post</a>, but here’s the <code>tl;dr</code> version:</p>

<ul>
  <li><code>TOL</code> as a new class prefix</li>
  <li>Arbitrary ad networks</li>
  <li>Ad network priority</li>
  <li>Conversion to ARC</li>
  <li>Presentation types</li>
  <li>Pinning locations (have ad reside at the top of your view)</li>
  <li>Easy setup with a new view controller subclass <code>TOLAdViewController</code></li>
  <li>Optional verbose debug logging for development</li>
  <li>Upgrade base iOS dependency to iOS 5.0</li>
</ul>

<h2 id="easy-integration">Easy Integration</h2>
<p>So let’s get started integrating your ad with some ad networks. If you would like to use Google as your ad vendor, then you will need to go ahead and setup an account with them and have your publisher ID handy.</p>

<p>This is going to be so stupid simple it’s going to blow your mind<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>.<!-- more --></p>

<h3 id="integrate-the-source">Integrate the Source</h3>
<p>This is by far the most difficult part of the entire process if you don’t use cocoapods. I highly suggest using cocoapods, so I’m going to go over that first. All of these instructions are mirrored on the <code>README</code> file on <a href="http://larsacus.github.com/LARSAdController">LARSAdController’s github page</a>.</p>

<p>If you don’t have cocoapods setup, visit <a href="http://cocoapods.org">cocoapods.org</a> for installation instructions. I promise, it’s really easy, too. Then come back here.</p>

<h4 id="cocoapods">Cocoapods</h4>
<p>To include the LARSAdController source with your project, you will need to include the LARSAdController dependency in what is known as a “Podfile”. In your project’s root directory, you will need to create a new empty text file named <code>Podfile</code>.</p>

<h5 id="podfile-setup">Podfile Setup</h5>
<p>Inside <code>Podfile</code>, you will need to declare your project’s platform and base deployment target. LARSAdController only supports base deployment targets of 5.0 and above. To do this, add this as the first line:</p>

<p><code>platform :ios, '5.0'</code></p>

<p>This tells cocoapods that our platform is iOS and that our deployment target is iOS 5.0 and above.</p>

<p>In order to tell cocoapods to install LARSAdController, simply specify that you would like your project to include LARSAdController as a “dependency”:</p>

<p><code>pod 'LARSAdController', '~&gt;3.0'</code></p>

<p>This will install the latest v3 code including every minor revision until v4.0 (3.1, 3.2, etc)<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>.</p>

<p>Your podfile should now look like this:<br />
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">platform</span> <span class="p">:</span><span class="n">ios</span><span class="p">,</span> <span class="err">‘</span><span class="mf">5.0</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">pod</span> <span class="err">‘</span><span class="n">LARSAdController</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="o">~&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mf">3.0</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This will setup your project for both Google ads and iAds.</p>

<h5 id="components">Components</h5>
<p>If you are only interested in iAds <em>or</em> Google Ads, then you <em>can</em> (but you don’t have to) specify a specific component of LARSAdController in your podfile instead of the above:</p>

<p>For only GoogleAds: <code>pod 'LARSAdController/GoogleAds', '~&gt;3.0'</code></p>

<p>For only iAds: <code>pod 'LARSAdController/iAds', '~&gt;3.0'</code></p>

<p>If you’re only interested in iAds, then this is a great way to avoid the bloat of the Google ads SDK in your project when you don’t even need it. Including both lines would be functionally the same as simply using <code>pod 'LARSAdController', '~&gt;3.0'</code> in your project.</p>

<h5 id="install">Install</h5>
<p>From here, save your podfile, and in terminal, run <code>pod install</code> to kickoff the installation. Cocoapods creates a new <code>xcworkspace</code> file with your pods already downloaded and configured for your project to use without you having to manage any of the dependencies.</p>

<p>You must now open the <code>&lt;your_app&gt;.xcworkspace</code> file to use LARSAdController.</p>

<p>Done. <a href="#decide-where">Click here</a> to skip the manual process instructions since you don’t need them.</p>

<h4 id="manually">Manually</h4>
<p>If you’re not using cocoapods, in order to use <code>LARSAdController</code>, you will need to clone this repo and add the <code>Source/</code> directory to your project, as well as add the required frameworks - all by hand.</p>

<p>…like a caveman</p>

<h5 id="git-submodule">Git Submodule</h5>
<p>You can do this the old way by simply cloning the repository and adding the files to your project as a git submodule as shown below:</p>

<p><code>git add submodule &lt;third_party_folder&gt; https://github.com/larsacus/LARSAdController.git --recursive</code></p>

<p>Where <code>&lt;third_party_folder&gt;</code> is the folder where all of your third party code lives in your project file structure.</p>

<h5 id="framework-requirements">Framework Requirements</h5>
<p>In order to compile, you will need to include the following Apple frameworks:</p>

<h6 id="iads">iAds</h6>

<ol>
  <li><code>iAd.framework</code></li>
  <li><code>AdSupport.framework</code> (weak-link for iOS 6)</li>
</ol>

<h6 id="google-ads">Google Ads</h6>

<ol>
  <li><code>StoreKit.framework</code></li>
  <li><code>AudioToolbox.framework</code></li>
  <li><code>MessageUI.framework</code></li>
  <li><code>SystemConfiguration.framework</code></li>
  <li><code>CoreGraphics.framework</code></li>
  <li><code>AdSupport.framework</code> (weak-link for iOS 6)</li>
</ol>

<p>You will also need the <code>Google AdMob SDK</code> available from <a href="https://developers.google.com/mobile-ads-sdk/download#downloadios">Google</a>. If you are using the <code>--recursive</code> call above, then a submodule of the googleads sdk will be cloned to the <code>Example/AdMob</code> folder.</p>

<h3 id="decide-where">Decide Where</h3>
<p>Decide where you want your ads to live. Try and stay away from trying to use them anywhere that the ad is going to be moving around (like in a table view cell). Publishers hate this and it could result in false impressions and possibly low revenues.</p>

<p>You have the option of placing your ad at the top or bottom of a view. By default, LARSAdController will place your ad at the bottom of a given view. Specify if you want your ad at the top of the view by calling the following somewhere in your app delegate (like in <code>applicationDidFinishLaunching:</code>):</p>

<p><code>[[LARSAdController sharedManager] setPinningLocation:LARSAdControllerPinLocationTop];</code></p>

<p>If you would like to dynamically change the pinning location depending on view controller, then place this call in <code>viewDidLoad:</code> of the view controller you would like to change and where you would like the ad to be.</p>

<h3 id="register-ad-networks">Register Ad Networks</h3>
<p>You will need to specify which ad networks you would like to use and in which order they should display. Calling the below code will register LARSAdController with the iAd network as a primary network. You will be calling this sometime before your first ad is requested, which we’ll go over next.</p>

<p><code>[[LARSAdController sharedManager] registerAdClass:[TOLAdAdapteriAds class]];</code></p>

<p>To add Google ads as a secondary network to iAds, then call the following sometime <em>after</em> the above call:</p>

<p><code>[[LARSAdController sharedManager] registerAdClass:[TOLAdAdapterGoogleAds class]];</code></p>

<p>If you would like the reverse - to have Google ads served before iAds, then simply reverse the order in which the ad networks were registered.</p>

<h3 id="add-banner-to-view">Add Banner to View</h3>
<p>To install the ad banner in each of your views (view controllers), call</p>

<p><code>[[LARSAdController sharedManager] addAdNetworkToViewInViewController:self];</code>.</p>

<p>I’ve found the best place to call this method is in your view controller’s <code>viewWillAppear:</code> method.</p>

<h4 id="even-simpler">Even Simpler</h4>
<p>Guess what? Integrating ads can be even easier than above. If you have each of your view controllers inherit from the base class <code>TOLAdViewController</code>, ads will automatically installed in your view on <code>viewWillAppear:</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MYBestViewControllerEvar</span> : <span class="nc">TOLAdViewController</span>
</span><span class='line'><span class="c1">//BOOM - Ads</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I’ve even included a method you can override in your view controller to conditionally display these ads. This is convenient when you don’t want to display ads under certain conditions (like when a user purchases an in-app upgrade):</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldDisplayAds</span><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">purchaseTracker</span> <span class="n">hasPurchasedUpgrade</span><span class="p">]</span> <span class="o">==</span> <span class="nb">NO</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="test">Test</h2>
<p>Make sure you test that everything is working correctly in your particular app before you ship to the app store. <a href="https://github.com/larsacus/LARSAdController/issues">Submit an issue on github</a> if something feels wrong.</p>

<h2 id="done">Done</h2>
<p>Easy. Total lines of code I’ve counted for a standard integration of two ad networks in a single view controller is two if you use the view controller subclass. Two lines of code to have ads properly served in your app. If you use cocoapods, you can go from nothing to proper ads in less than a minute.</p>

<p><a href="http://larsacus.github.com/LARSAdController">LARSAdController</a> v3.0 is released under the very liberal MIT license on github. If you’re using LARSAdController in your app, I’d love to know. You can send me an email if you can find it, <a href="http://github.com/larsacus/LARSAdController">fork the repo</a> and change the readme on GitHub, or even better, just send me a quick note at <a href="http://twitter.com/theonlylars">@theonlylars</a> and I’ll add it to the bottom of the README file.</p>

<p>If you find an bug or have a suggestion, feel free to <a href="https://github.com/larsacus/LARSAdController/issues">submit a new issue on github</a> <em>with reproduction information and preferably source code</em> as well as a description of what you’re trying to accomplish if it even <em>feels</em> like it’s out of the normal use case.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>I take no responsibility for the actual rupturing of the cranium, inter-cranial blood vessels, or ocular regions as a result of reading this. Any reading from this point on is purely at your own risk. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Since cocoapods takes largely from the ruby community, the <code>~&gt;</code> operator will function exactly like it does there. You can read more about this “pessimistic operator” on the <a href="http://docs.rubygems.org/read/chapter/16#page74">rubygems site here</a>. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
