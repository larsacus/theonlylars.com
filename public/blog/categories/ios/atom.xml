<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | theonlylars]]></title>
  <link href="http://theonlylars.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://theonlylars.com/"/>
  <updated>2013-02-09T19:57:27-06:00</updated>
  <id>http://theonlylars.com/</id>
  <author>
    <name><![CDATA[Lars Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cocoapods: Creating a Pod Spec]]></title>
    <link href="http://theonlylars.com/blog/2013/01/20/cocoapods-creating-a-pod-spec/"/>
    <updated>2013-01-20T14:58:00-06:00</updated>
    <id>http://theonlylars.com/blog/2013/01/20/cocoapods-creating-a-pod-spec</id>
    <content type="html"><![CDATA[<p><em>Note: Cocoapods is all very new and in rapid development (currently v0.16.1 as of this writing), if you are in the know and any of the below is wrong or incorrect, please let me know and I’ll change it.</em></p>

<p><img class="left" src="/images/posts/cocoapods/cocoapods_logo.png" width="200" height="200">If you’re reading this there is a good chance you have at least heard of <a href="http://cocoapods.org">Cocoapods</a>. For the uninitiated, Cocoapods is a dependency manager for Mac and iOS projects built on Ruby and based on the Ruby community’s “<a href="http://gembundler.com">rubygem bundler</a>”. Each “pod” has a “spec” that is utilized in order to know how to integrate a given component with your project and resolve any dependencies your project may have with other libraries. I’ll be referring to these from here on out as either a “podspec” or more simply - a “spec”.</p>

<p>Since I’ve had some trouble easily writing my podspecs in the past (and have run into poorly-tested specs in the specs repository), I have put together a collection of knowledge on the things I have learned while building and testing my podspecs.<!-- more --></p>

<p>I’m assuming that you already have cocoapods installed, and that you are looking to build and test a new <code>.podspec</code> file for a component.</p>

<h2 id="what-is-a-spec">What is a Spec?</h2>
<p>The basis behind how cocoapods is able to function is on a project’s “podspec”. Podspecs are created by maintainers of a project (or sometimes just other developers who want to use a component as a pod) and submitted to a public repository of specs in an organized git repository on github.</p>

<p>Specs identify everything about a library or component that needs to be performed before you can properly use it in your project. This includes everything from supported platform, ARC-readiness and required frameworks to other C flags that might need to be switched on.</p>

<h2 id="basic-requirements">Basic Requirements</h2>
<p>At a minimum, your spec needs to have the following attributes defined in order to be valid. If you think about it, if any one of these were missing, the spec itself wouldn’t really make sense:</p>

<ul>
  <li>Component name</li>
  <li>Semantic version number</li>
  <li>Platform</li>
  <li>Summary</li>
  <li>Author info dictionary</li>
  <li>Component homepage</li>
  <li>License</li>
  <li>Source location</li>
  <li>Source files list</li>
  <li>Any component dependencies*</li>
  <li>Required apple frameworks*</li>
</ul>

<h3 id="semantic-versioning">Semantic Versioning</h3>
<p>Cocoapods <a href="https://github.com/CocoaPods/CocoaPods/wiki/Contributing-to-the-master-repo"><em>highly</em> suggests</a> using (as in - don’t <em>not</em> do it) <a href="http://semver.org">semantic versioning</a> to version your cocoapods. Without semantic versioning, it becomes much more difficult if not impossible to resolve some cross-dependencies between similar pod dependencies in your project, if any exist. All that was very complicated to say - use semantic versioning (v1.1.0). Tag your code in your repository with a tag corresponding to the version number of your component (for v3.0.0 of your component, tag your code <code>3.0.0</code>).</p>

<h3 id="dependencies">Dependencies</h3>
<p>The dependency line is technically optional if your component does not rely on any external pod.</p>

<h3 id="frameworks">Frameworks</h3>
<p>The frameworks line is also technically optional if your pod only uses the standard apple frameworks.</p>

<h2 id="construction">Construction</h2>
<p>A Podspec is <a href="https://github.com/CocoaPods/CocoaPods/wiki/A-pod-specification">constructed by building a new <code>Spec</code> object</a> using a ruby “block”. My ruby-fu is still pretty green, so I won’t try and explain the ruby-ness of a podspec. To create a podspec using a block, we’re going to declare the following in a new file named <code>&lt;component_name&gt;.podspec</code>. Please don’t literally put the angle brackets in your file name:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>AwesomeComponent.podspec </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># pod customization goes in here</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This creates a new <code>Spec</code> object that is included in the <code>Pod</code> library and inserts it into the local variable <code>s</code> for us to customize before it is returned. I’ve gone ahead and filled in some basic information for a spec I wrote for LARSAdController to demonstrate:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>LARSAdController.podspec </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">name</span>         <span class="o">=</span> <span class="err">‘</span><span class="no">LARSAdController</span><span class="err">’</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">version</span>      <span class="o">=</span> <span class="err">‘</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="err">’</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">summary</span>      <span class="o">=</span> <span class="err">‘</span><span class="no">Lightweight</span> <span class="n">ad</span> <span class="n">mediation</span> <span class="k">for</span> <span class="n">iOS</span><span class="err">’</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">‘</span><span class="no">Lars</span> <span class="no">Anderson</span><span class="err">’</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="n">youremail</span><span class="vi">@here</span><span class="o">.</span><span class="n">com</span><span class="err">’</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:git</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">larsacus</span><span class="o">/</span><span class="no">LARSAdController</span><span class="o">.</span><span class="n">git</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:tag</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="err">’</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="err">‘</span><span class="no">Source</span><span class="o">/*.</span><span class="p">{</span><span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">}</span><span class="err">’</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">dependency</span>     <span class="err">‘</span><span class="no">AdMob</span><span class="err">’</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will include all source files with file extensions <code>.h</code> &amp; <code>.m</code> in the <code>Source/</code> folder in the github repository <code>https://github.com/larsacus/LARSAdController.git</code> in the source tag <code>3.0.0</code> while also including the pod for the dependency of <code>AdMob</code>.</p>

<h3 id="hashes">Hashes</h3>
<p>If you’re unfamiliar with ruby, you’ll notice some interesting <code>{}</code> structures being assigned to variables like <code>source</code> and <code>author</code>. These structures are called “hashes” and they are exactly like your standard dictionary in objective-c:</p>

<p><code>key =&gt; value</code></p>

<p>For the <code>source</code> hash, the colon (<code>:</code>) before the key name is important. This <a href="http://rubylearning.com/satishtalim/ruby_hashes.html">defines things like :git and :tag as ruby “symbols”</a> that are defined within cocoapods.</p>

<h3 id="tags-and-unversioned-repositories">Tags and Unversioned Repositories</h3>
<p>There are other methods of specifying the location of source code instead of tags, but you should really be using tags to mark your code commit for your spec. If you are not the owner of the repository you are creating a spec for, <a href="https://github.com/CocoaPods/CocoaPods/wiki/Contributing-to-the-master-repo">file an issue with the repository</a> to request that a tag be made. If this doesn’t work, then you should specify the version of your podspec to begin at <code>0.0.1</code> to indicate that this pod’s spec is unmanaged. Should the owner finally get a tag, then you can update the podspec with the correct version with little fear of conflicting with your previously unmanaged podspec’s version.</p>

<h3 id="version-simplification">Version Simplification</h3>
<p>Since this is just a ruby file, you can use all of the ruby tricks on any string in this file. To simplify our podspec for revving our version later, you can tell our <code>source</code> hash to use the podspec’s version as the repository’s tag to use using the <code>to_s</code> helper:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">source</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:git</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">larsacus</span><span class="o">/</span><span class="no">LARSAdController</span><span class="o">.</span><span class="n">git</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:tag</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">s</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="completing-your-spec">Completing Your Spec</h2>
<p>This is where writing a podspec gets a little complicated. The general example specs from the wiki are just fine, but when you start customizing your spec to the specific needs of your component or library, you can easily find yourself running to google with few available resources.</p>

<h3 id="help">Help</h3>
<p>For the majority of the issues you will run into when creating your podspec, the <a href="https://github.com/CocoaPods/CocoaPods/wiki/">cocoapods wiki</a> will have a page that will answer your question. Almost every issue I was having, I eventually found the answer to in the wiki. It could be a little better organized, because I really can’t complain too much since I haven’t submitted a pull request to fix it myself.</p>

<p>If you simply cannot find an answer anywhere, submit an issue on the <a href="https://github.com/CocoaPods/Specs/issues">Cocoapods/Specs</a> repository (not the Cocoapods/Cocoapods repo) and someone is usually knowledgable enough to figure out what you’re doing wrong or help you file a bug to fix the issue.</p>

<h3 id="learn-by-example">Learn By Example</h3>
<p>If you have a component or library that is built a specific way and you’re having an issue, try and find a similar component that is built like yours and try that Pod’s spec configuration. For instance, if your component is a static library, find a spec (like <a href="https://github.com/CocoaPods/Specs/blob/master/TestFlightSDK/1.2/TestFlightSDK.podspec">Testflight</a>) that is built utilizing a static library.</p>

<h2 id="testing">Testing</h2>
<p>I found that this step was by far the most difficult to perform. I was not about to simply deploy a podspec that I had not tested, so this left me not even wanting to build a podspec for my component. I’m going to spare you the workflow iterations I tried before arriving at what I believe to be the “correct” way to test your podspec.</p>

<p><em>I also understand that I am fully able to submit pull requests to modify the cocoapods wiki to make it more clear. This is something that I simply have not done, yet. This is way easier for now.</em></p>

<h2 id="spec-lint">Spec Lint</h2>
<p>The first step to testing your spec is to use cocoapods’ built-in “lint” tool to test for syntax compliance and minimum requirements. In your terminal prompt, run the lint tool on your podspec using:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pod spec lint “&lt;spec <span class="nv">location</span><span class="o">=</span><span class="s2">&quot;&quot;</span>&gt;/SpecName.podspec<span class="err">&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></spec></p>

<p>If anything is syntactically wrong with your spec, it will show up here after running lint. Refer to the <a href="https://github.com/CocoaPods/CocoaPods/wiki">cocoapods wiki</a> if any errors or warnings come up.</p>

<h2 id="in-project-functional-testing">In-Project (Functional) Testing</h2>
<p>It’s <em>very</em> important to actually test your pod in a <em>fresh</em> project without any other configuration. Don’t be the guy that creates a spec, submits it, then you get a bunch of complaints because your spec doesn’t actually install properly when it’s installed. It’s also annoying to find a spec you can use, put it as a dependency on your project, only to find out it’s not configured properly. It looks bad on the cocoapods community when this happens.</p>

<p>Please functionally test your specs before submitting them:</p>

<ol>
  <li>Create a new empty xcode project</li>
  <li>Create your <code>Podfile</code></li>
  <li>Add your pod as a project dependency</li>
  <li>Specify local file path for new podspec</li>
</ol>

<p>This is where I had a huge issue testing my podspec. The trick I learned is to <a href="https://github.com/CocoaPods/CocoaPods/wiki/Dependency-declaration-options">specify a local file path</a> for your Podfile to look for your new podspec:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="err">‘</span><span class="no">LARSAdController</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="err">’</span><span class="p">,</span> <span class="ss">:local</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="err">‘</span><span class="o">~</span><span class="sr">/Specs/</span><span class="no">LARSAdController</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now you can install and test your pod:</p>

<ol>
  <li>Install pod
    <ul>
      <li><code>pod install</code> (initial install)</li>
      <li><code>pod update</code> (subsequent installs)</li>
    </ul>
  </li>
  <li>Test to ensure your component works</li>
  <li>Rinse, repeat until component installs correctly</li>
</ol>

<h2 id="subspecs">Subspecs</h2>
<p>A cool feature of cocoapods is it’s ability for you to specify sub-components of your component to include. This will enable other developers to be able to a-la-carte choose which sub-components of your library to include in their project. This reduces the bloat, especially when only some parts of your project have dependencies on other large components.</p>

<p>Subspecs are totally optional in your podspec.</p>

<h3 id="defining-a-subspec">Defining a Subspec</h3>
<p>To define a <a href="https://github.com/CocoaPods/CocoaPods/wiki/The-podspec-format">subspec</a> in your spec file, define a <code>subspec</code> variable (?) on your spec variable - much like we did in creating the spec itself:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">subspec</span> <span class="err">‘</span><span class="n">iAds</span><span class="err">’</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="err">‘</span><span class="no">Source</span><span class="o">/</span><span class="n">iAds</span><span class="o">/*.</span><span class="p">{</span><span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">}</span><span class="err">’</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">dependency</span> <span class="err">‘</span><span class="no">LARSAdController</span><span class="o">/</span><span class="no">Core</span><span class="err">’</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">frameworks</span> <span class="o">=</span> <span class="err">‘</span><span class="no">QuartzCore</span><span class="err">’</span>
</span><span class='line'>    <span class="n">a</span><span class="o">.</span><span class="n">weak_frameworks</span> <span class="o">=</span> <span class="err">‘</span><span class="no">AdSupport</span><span class="err">’</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Give your subspec a descriptive name, specify the source files to use, etc. In the above example, I have named this subspec ‘iAds’ since this will be including iAd functionality in with my pod. You’ll continue to customize the subspec in the same way that you customized your parent spec object. Note that the subspec will inherit all of the base properties of the parent spec, so there is no need to repeat them in your subspec.</p>

<p>There are some properties that are not allowed to be defined on a subspec and can only be defined on the parent spec. These “Top level attributes” are outlined on the <a href="https://github.com/CocoaPods/CocoaPods/wiki/The-podspec-format">podspec page</a> on the Cocoapods wiki.</p>

<p>Continue to create additional subspecs for however many sub-specifications that you need to create using the template:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">subspec</span> <span class="err">‘</span><span class="no">SubspecName</span><span class="err">’</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># Customize</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="final-product">Final Product</h3>
<p>In the end, you should have a podspec that looks a lot like mine does <a href="https://github.com/CocoaPods/Specs/blob/master/LARSAdController/3.0.0/LARSAdController.podspec">for LARSAdController</a>.</p>

<h3 id="depending-on-a-subspec">Depending on a Subspec</h3>
<p>To use the subspec in a Podfile, define the dependency like normal, but suffix it with a <code>/</code> and the subspec name:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pod</span> <span class="err">‘</span><span class="no">LARSAdController</span><span class="o">/</span><span class="n">iAds</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="releasing">Releasing</h2>
<p>Congratulations! You’ve now completed the hardest parts of constructing your podspec. This next part is easy as long as your podspec lints correctly and installs - which you’ve already tested, right? In order to contribute to the <a href="https://github.com/CocoaPods/Specs">Cocoapods/Specs</a> repository, you will need to clone the repo, add your spec and submit a pull request to have your spec added.</p>

<h3 id="forkingcloning">Forking/Cloning</h3>
<p>To add your spec to the list of podspecs, you will need to fork the <a href="https://github.com/CocoaPods/Specs">Cocoapods/Specs</a> repo using your own github account. If you have cloned a fork of the repository and haven’t committed to it even in the last 12 hours, you will want to update your repository by doing a <code>git pull</code> on your repo specifying the original remote location to pull the latest podspecs from. This repository gets updated quite frequently, so make sure you are up to date.</p>

<p>You will then need to clone the repository on your local machine and add your spec using the established file structure:</p>

<p><code>ProjectName/Version/ProjectName.podspec</code></p>

<p>So for the last release of LARSAdController, I put my latest podspec in <code>LARSAdController/3.0.0/LARSAdController.podspec</code> - one podspec per version folder.</p>

<p>Once this is added, you’ll want to add the files to git, commit, and push them back up to your own fork of the Specs repo.</p>

<h3 id="pull-request">Pull Request</h3>
<p>Once the podspec is committed and pushed to your fork on github, you can submit a new pull request to merge the changes you made in your fork to the master repository that cocoapods is pulling their spec library from.</p>

<p>The friendly, hard-working folks who actively work to get your components merged in will then make sure that everything is linted and working correctly (syntactically, but not functionally) before allowing your changes to be merged into the master specs branch.</p>

<p>If this succeeds, then your podspec will now be available for everyone to use in their own projects! Pat yourself on the back - it wasn’t all that bad, was it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stupid Easy iOS Ad Mediation with LARSAdController 3.0]]></title>
    <link href="http://theonlylars.com/blog/2013/01/10/stupid-easy-ads-with-larsadcontroller-3-dot-0/"/>
    <updated>2013-01-10T20:10:00-06:00</updated>
    <id>http://theonlylars.com/blog/2013/01/10/stupid-easy-ads-with-larsadcontroller-3-dot-0</id>
    <content type="html"><![CDATA[<h2 id="roots">Roots</h2>
<p>When I originally built LARSAdController, I was building it to fulfill a very specific purpose for my first app (Droid Light): leverage a singleton to serve a single ad instance for iAds using best practices, and serve AdMob ads as a backup when iAds (stellar) inventory ran dry. Since then, I’ve expanded it to support multiple devices, as well as multiple orientations, all while being super-easy to integrate.</p>

<h2 id="section">3.0</h2>
<p>Version 3.0 now supports all of the things that the old version did, but now allows you much more flexibility and freedom in how you would like your ads to be used.</p>

<h3 id="major-changes-from-v2x">Major Changes from v2.x</h3>

<p>A detailed changelog of what has changed can be found in the <a href="/blog/2012/12/15/larsadcontroller-3-dot-0-rc/">LARSAdController 3.0 release-candidate post</a>, but here’s the <code>tl;dr</code> version:</p>

<ul>
  <li><code>TOL</code> as a new class prefix</li>
  <li>Arbitrary ad networks</li>
  <li>Ad network priority</li>
  <li>Conversion to ARC</li>
  <li>Presentation types</li>
  <li>Pinning locations (have ad reside at the top of your view)</li>
  <li>Easy setup with a new view controller subclass <code>TOLAdViewController</code></li>
  <li>Optional verbose debug logging for development</li>
  <li>Upgrade base iOS dependency to iOS 5.0</li>
</ul>

<h2 id="easy-integration">Easy Integration</h2>
<p>So let’s get started integrating your ad with some ad networks. If you would like to use Google as your ad vendor, then you will need to go ahead and setup an account with them and have your publisher ID handy.</p>

<p>This is going to be so stupid simple it’s going to blow your mind<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.<!-- more --></p>

<h3 id="integrate-the-source">Integrate the Source</h3>
<p>This is by far the most difficult part of the entire process if you don’t use cocoapods. I highly suggest using cocoapods, so I’m going to go over that first. All of these instructions are mirrored on the <code>README</code> file on <a href="http://larsacus.github.com/LARSAdController">LARSAdController’s github page</a>.</p>

<p>If you don’t have cocoapods setup, visit <a href="http://cocoapods.org">cocoapods.org</a> for installation instructions. I promise, it’s really easy, too. Then come back here.</p>

<h4 id="cocoapods">Cocoapods</h4>
<p>To include the LARSAdController source with your project, you will need to include the LARSAdController dependency in what is known as a “Podfile”. In your project’s root directory, you will need to create a new empty text file named <code>Podfile</code>.</p>

<h5 id="podfile-setup">Podfile Setup</h5>
<p>Inside <code>Podfile</code>, you will need to declare your project’s platform and base deployment target. LARSAdController only supports base deployment targets of 5.0 and above. To do this, add this as the first line:</p>

<p><code>platform :ios, '5.0'</code></p>

<p>This tells cocoapods that our platform is iOS and that our deployment target is iOS 5.0 and above.</p>

<p>In order to tell cocoapods to install LARSAdController, simply specify that you would like your project to include LARSAdController as a “dependency”:</p>

<p><code>pod 'LARSAdController', '~&gt;3.0'</code></p>

<p>This will install the latest v3 code including every minor revision until v4.0 (3.1, 3.2, etc)<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>Your podfile should now look like this:<br />
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="err">‘</span><span class="mf">5.0</span><span class="err">’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">pod</span> <span class="err">‘</span><span class="n">LARSAdController</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="o">~&amp;</span><span class="n">gt</span><span class="p">;</span><span class="mf">3.0</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will setup your project for both Google ads and iAds.</p>

<h5 id="components">Components</h5>
<p>If you are only interested in iAds <em>or</em> Google Ads, then you <em>can</em> (but you don’t have to) specify a specific component of LARSAdController in your podfile instead of the above:</p>

<p>For only GoogleAds: <code>pod 'LARSAdController/GoogleAds', '~&gt;3.0'</code></p>

<p>For only iAds: <code>pod 'LARSAdController/iAds', '~&gt;3.0'</code></p>

<p>If you’re only interested in iAds, then this is a great way to avoid the bloat of the Google ads SDK in your project when you don’t even need it. Including both lines would be functionally the same as simply using <code>pod 'LARSAdController', '~&gt;3.0'</code> in your project.</p>

<h5 id="install">Install</h5>
<p>From here, save your podfile, and in terminal, run <code>pod install</code> to kickoff the installation. Cocoapods creates a new <code>xcworkspace</code> file with your pods already downloaded and configured for your project to use without you having to manage any of the dependencies.</p>

<p>You must now open the <code>&lt;your_app&gt;.xcworkspace</code> file to use LARSAdController.</p>

<p>Done. <a href="#decide-where">Click here</a> to skip the manual process instructions since you don’t need them.</p>

<h4 id="manually">Manually</h4>
<p>If you’re not using cocoapods, in order to use <code>LARSAdController</code>, you will need to clone this repo and add the <code>Source/</code> directory to your project, as well as add the required frameworks - all by hand.</p>

<p>…like a caveman</p>

<h5 id="git-submodule">Git Submodule</h5>
<p>You can do this the old way by simply cloning the repository and adding the files to your project as a git submodule as shown below:</p>

<p><code>git add submodule &lt;third_party_folder&gt; https://github.com/larsacus/LARSAdController.git --recursive</code></p>

<p>Where <code>&lt;third_party_folder&gt;</code> is the folder where all of your third party code lives in your project file structure.</p>

<h5 id="framework-requirements">Framework Requirements</h5>
<p>In order to compile, you will need to include the following Apple frameworks:</p>

<h6 id="iads">iAds</h6>

<ol>
  <li><code>iAd.framework</code></li>
  <li><code>AdSupport.framework</code> (weak-link for iOS 6)</li>
</ol>

<h6 id="google-ads">Google Ads</h6>

<ol>
  <li><code>StoreKit.framework</code></li>
  <li><code>AudioToolbox.framework</code></li>
  <li><code>MessageUI.framework</code></li>
  <li><code>SystemConfiguration.framework</code></li>
  <li><code>CoreGraphics.framework</code></li>
  <li><code>AdSupport.framework</code> (weak-link for iOS 6)</li>
</ol>

<p>You will also need the <code>Google AdMob SDK</code> available from <a href="https://developers.google.com/mobile-ads-sdk/download#downloadios">Google</a>. If you are using the <code>--recursive</code> call above, then a submodule of the googleads sdk will be cloned to the <code>Example/AdMob</code> folder.</p>

<h3 id="decide-where">Decide Where</h3>
<p>Decide where you want your ads to live. Try and stay away from trying to use them anywhere that the ad is going to be moving around (like in a table view cell). Publishers hate this and it could result in false impressions and possibly low revenues.</p>

<p>You have the option of placing your ad at the top or bottom of a view. By default, LARSAdController will place your ad at the bottom of a given view. Specify if you want your ad at the top of the view by calling the following somewhere in your app delegate (like in <code>applicationDidFinishLaunching:</code>):</p>

<p><code>[[LARSAdController sharedManager] setPinningLocation:LARSAdControllerPinLocationTop];</code></p>

<p>If you would like to dynamically change the pinning location depending on view controller, then place this call in <code>viewDidLoad:</code> of the view controller you would like to change and where you would like the ad to be.</p>

<h3 id="register-ad-networks">Register Ad Networks</h3>
<p>You will need to specify which ad networks you would like to use and in which order they should display. Calling the below code will register LARSAdController with the iAd network as a primary network. You will be calling this sometime before your first ad is requested, which we’ll go over next.</p>

<p><code>[[LARSAdController sharedManager] registerAdClass:[TOLAdAdapteriAds class]];</code></p>

<p>To add Google ads as a secondary network to iAds, then call the following sometime <em>after</em> the above call:</p>

<p><code>[[LARSAdController sharedManager] registerAdClass:[TOLAdAdapterGoogleAds class]];</code></p>

<p>If you would like the reverse - to have Google ads served before iAds, then simply reverse the order in which the ad networks were registered.</p>

<h3 id="add-banner-to-view">Add Banner to View</h3>
<p>To install the ad banner in each of your views (view controllers), call</p>

<p><code>[[LARSAdController sharedManager] addAdNetworkToViewInViewController:self];</code>.</p>

<p>I’ve found the best place to call this method is in your view controller’s <code>viewWillAppear:</code> method.</p>

<h4 id="even-simpler">Even Simpler</h4>
<p>Guess what? Integrating ads can be even easier than above. If you have each of your view controllers inherit from the base class <code>TOLAdViewController</code>, ads will automatically installed in your view on <code>viewWillAppear:</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MYBestViewControllerEvar</span> : <span class="nc">TOLAdViewController</span>
</span><span class='line'><span class="c1">//BOOM - Ads</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I’ve even included a method you can override in your view controller to conditionally display these ads. This is convenient when you don’t want to display ads under certain conditions (like when a user purchases an in-app upgrade):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldDisplayAds</span><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">purchaseTracker</span> <span class="n">hasPurchasedUpgrade</span><span class="p">]</span> <span class="o">==</span> <span class="n">NO</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="test">Test</h2>
<p>Make sure you test that everything is working correctly in your particular app before you ship to the app store. <a href="https://github.com/larsacus/LARSAdController/issues">Submit an issue on github</a> if something feels wrong.</p>

<h2 id="done">Done</h2>
<p>Easy. Total lines of code I’ve counted for a standard integration of two ad networks in a single view controller is two if you use the view controller subclass. Two lines of code to have ads properly served in your app. If you use cocoapods, you can go from nothing to proper ads in less than a minute.</p>

<p><a href="http://larsacus.github.com/LARSAdController">LARSAdController</a> v3.0 is released under the very liberal MIT license on github. If you’re using LARSAdController in your app, I’d love to know. You can send me an email if you can find it, <a href="http://github.com/larsacus/LARSAdController">fork the repo</a> and change the readme on GitHub, or even better, just send me a quick note at <a href="http://twitter.com/theonlylars">@theonlylars</a> and I’ll add it to the bottom of the README file.</p>

<p>If you find an bug or have a suggestion, feel free to <a href="https://github.com/larsacus/LARSAdController/issues">submit a new issue on github</a> <em>with reproduction information and preferably source code</em> as well as a description of what you’re trying to accomplish if it even <em>feels</em> like it’s out of the normal use case.</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>I take no responsibility for the actual rupturing of the cranium, inter-cranial blood vessels, or ocular regions as a result of reading this. Any reading from this point on is purely at your own risk. <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Since cocoapods takes largely from the ruby community, the <code>~&gt;</code> operator will function exactly like it does there. You can read more about this “pessimistic operator” on the <a href="http://docs.rubygems.org/read/chapter/16#page74">rubygems site here</a>.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LARSAdController 3.0 RC]]></title>
    <link href="http://theonlylars.com/blog/2012/12/15/larsadcontroller-3-dot-0-rc/"/>
    <updated>2012-12-15T15:25:00-06:00</updated>
    <id>http://theonlylars.com/blog/2012/12/15/larsadcontroller-3-dot-0-rc</id>
    <content type="html"><![CDATA[<p><em>Edit Jan 10, 2013: Since publishing this post, <a href="/blog/2013/01/10/stupid-easy-ads-with-larsadcontroller-3-dot-0/">LARSAdController v3.0 has been pushed to the master branch</a> on <a href="https://github.com/larsacus/LARSAdController/">github</a>!</em></p>

<p>I’ve been working hard on refactoring <a href="https://github.com/larsacus/LARSAdController/tree/2.1.1">LARSAdController 2.0</a> into a more modular and maintainable state over the past few months. I think it’s finally in a place that could warrant some final testing from other developers before being merged into the master branch. </p>

<p>Let’s take a look at what’s changed:</p>

<h2 id="a-new-class-prefix">A New Class Prefix</h2>
<p>I’ve been using the class prefix <code>LARS</code> for all of my open-source classes. While this really is short and unique, it’s always felt pretty egotistical to have my name plastered all over my classes. This is just how I feel from this side of the keyboard. Does it look the same from the user’s end? Let me know what you think.</p>

<p>Anyway, I’ve migrated new classes to the new <code>TOL</code> prefix, for <a href="https://twitter.com/theonlylars">@<strong>T</strong>he<strong>O</strong>nly<strong>L</strong>ars</a>. This feels more anonymous and I haven’t seen the prefix used by anyone else before, yet. I’d love to know if someone well known <em>is</em> using the <code>TOL</code> class prefix. If I feel like I like this prefix better, I may just start using it for everything.</p>

<p>I also like that it sounds like “toll”. I have grand visions of having some cool project named <code>TOLBooth</code>, <code>TOLRoad</code>, or <code>TOLHouse</code>. I can’t think of practical project ideas to put those names on, however.</p>

<h2 id="modular-ad-networks">Modular Ad Networks</h2>
<p>The big new feature for this release is modular ad networks. Ad junkies will know this as ad mediation. AdMob has an ad mediation framework, so does AdWhirl, MobClix, and others. This is my implementation. The actual mediation logic is in a single .h/.m file pair. The other files support the ad networks. I feel this is a very lightweight implementation compared to other company’s mediation platforms, not to mention it’s open source so you can peek under the hood to see how another developer has solved a problem.</p>

<p>Right now I’ve built ad network adapters for iAds and AdMob ads. These are the only two ad networks that I use in Droid Light, so I don’t know much about others, and these two seem to be the most popular for banner ads on iOS.</p>

<h3 id="house-ads">House Ads</h3>
<p>A third planned adapter I’m particularly excited about is an adapter for “house” ads, <em>but I have not started on it as of yet</em>. House ads would basically amount to an image and a tap destination that you supply yourself. It’s an ad for yourself. <!-- more -->This will ideally be loaded dynamically from a remote server somewhere so you won’t have to upload a new binary to the app store every time you want to change the ads.</p>

<p>You could have this house ad link to another page in your app, have it load a remote URL for another app you have in the app store, or even let users know a new version is available. This would be able to be mediated in just like any other ad network.</p>

<p>This is not necessarily part of this release, but is something that is going to be at least started by then.</p>

<h3 id="additional-ad-networks">Additional Ad Networks</h3>
<p>Additional ad networks can be easily created by conforming your <code>NSObject</code> subclass to the <code>TOLAdAdapter</code> protocol. As long as you have logging enabled, I feel the warnings and assertions, as well as the header documentation have been well-built enough to make this a pretty painless process.</p>

<h3 id="priority">Priority</h3>
<p>You can now prioritize which ad network you would like to have highest priority. Version 2.0 and prior had their priority fixed to have iAds serve first and have AdMob ads slaved to display when there was no available iAd inventory to display.</p>

<p>This worked for the first couple years of iAd as the eCPM and fill rate was so much better than anything else. Since iAds are basically paying out on par or worse than AdMob ads with way worse fill rates, you may not want to have iAds be your highest priority network. This is now possible.</p>

<h2 id="arc">ARC</h2>
<p><code>LARSAdController</code> 3.0 is now ARC-enabled. You’re welcome.</p>

<h2 id="presentation-types--pinning-location">Presentation Types &amp; Pinning Location</h2>
<p>In 2.0 and prior versions, you were limited to only displaying the ad at the bottom of your view and having it slide from the bottom as your animation. Two new properties have been added on <code>LARSAdController</code>: <code>presentationType</code> and <code>pinningLocation</code>.</p>

<h3 id="presentationtype">presentationType</h3>
<p>You now have the option to change the animation sliding direction of your ads when a new ad is loaded and animated on screen. You can have it slide in from any edge. I thought about adding different transition types (flip, etc.), but thought it really unnecessary unless this is something other’s think they want.</p>

<h3 id="pinninglocation">pinningLocation</h3>
<p>You also now have the option to change the physical location that the ad container lives on screen. In addition to the good ol’ bottom of your view, you can pin the ad to the top of the view. This is not revolutionary.</p>

<h2 id="a-view-controller-subclass">A View Controller Subclass</h2>
<p>I’ve created a new view controller subclass that is the <em>easiest</em> method to integrating ads into your view controller’s view. For simple configurations, simply having your view controller inherit from <code>TOLAdViewController</code> will display an ad on <code>viewDidLoad:</code>, just like is suggested in the setup instructions. Literally no other work is needed from you in the simplest case.</p>

<h3 id="conditionally-display-ads">Conditionally Display Ads</h3>
<p>If you need to conditionally display ads while using the view controller subclass, overriding <code>shouldDisplayAds</code> will enable you to add some logic to determine if the subclass should add the ad container to your view or not. If you return <code>NO</code>, then nothing else is performed and no ad is added to your view hierarchy. The base implementation always returns <code>YES</code>.</p>

<p>I am dogfooding this view controller to myself in Droid Light, so it works for more than just the trivial implementations.</p>

<h2 id="debug-logging">Debug Logging</h2>
<p>I’ve added pretty extensive debug logging for what’s currently constructed. If something goes wrong, you should be able to tell <em>what</em> is going on and on what line in what file. Runtime warnings are unconditionally displayed regardless of debug log state and should probably be taken care of.</p>

<p>To enable logs, simple define the <code>LARSADCONTROLLER_DEBUG</code> macro somewhere.</p>

<h2 id="help">Help?</h2>
<p>I primarily created <code>LARSAdController</code> because I was unsatisfied with the big ad mediation networks. They also felt pretty heavyweight and a lot of overhead to simply run two mediated ad networks on my low-traffic app<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. This is my simple solution to theirs.</p>

<p>This post is primarily asking for a handful of people to clone, implement, and just see if they see anything awry with their particular implementation needs. Detailed code samples and changes are on the README on the project repo’s <a href="https://github.com/larsacus/LARSAdController/tree/3.0.0">tag</a>.</p>

<p>You can find the <a href="https://github.com/larsacus/LARSAdController/tree/3.0.0">3.0 tag here</a> and file <a href="https://github.com/larsacus/LARSAdController/issues">issues here</a>. Don’t be shy about issues. If it’s not a bug, but simply something you didn’t expect and want clarification, file an issue.</p>

<p>If you’re so inclined, let me know what you think: <a href="https://twitter.com/theonlylars">@theonlylars</a></p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>That and I <em>hate</em> when 3rd party libraries make me use the <code>-all_load</code> compiler flag<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Forget the "C" in Objective-C: C Declarations]]></title>
    <link href="http://theonlylars.com/blog/2012/12/10/dont-forget-the-c-in-objective-c/"/>
    <updated>2012-12-10T00:00:00-06:00</updated>
    <id>http://theonlylars.com/blog/2012/12/10/dont-forget-the-c-in-objective-c</id>
    <content type="html"><![CDATA[<p>It’s been awhile. I blame my bike and the Thanksgiving Steam sale. If you’re seriously reading this, then it is statistically likely your productivity was at some point affected by Steam’s Thanksgiving sale.</p>

<p>This post is going to primarily serve for my personal purposes to bookmark some articles and blog posts I’ve been referencing to remind myself some of the basics of C declarations while working in, as well as how they relate to Objective-C. This is going to be one of those posts that I’m probably going to add to as time goes on. This is also kind of a prelude to a future similarly-themed bookmarking post for myself on ARC.</p>

<p>Note also that while using very specific type and storage qualifiers can be unnecessary for most Objective-C development, Apple pretty much threw everyone into the fray when they introduced such common identifiers such as <code>__block</code> with Grand Central Dispatch. It got even better when ARC was introduced. You’ll see…</p>

<h2 id="variable-declaration">Variable Declaration</h2>

<h3 id="the-problem">The Problem</h3>
<p>This is something that was either not immediately obvious to me when writing software, or I simply was never formally shown this. I’m not entirely sure how I never picked up on this in all my years of writing software (even informally), but here it is:</p>

<p>This: <code>const NSString * myString</code> is totally not the same as this: <code>NSString * const myString</code>.</p>

<!--more-->

<p>Mind blown, right? If you asked either “Why are they not the same?” or “I don’t see a difference”, we’ll get to that in a sec. It all has to do with how the compiler interprets your variable declaration. The whole process is actually a lot more sophisticated and complicated than I’m about to explain it, but it’s essentially looking for variable declaration modifiers in the following format:</p>

<p><code>[storage class] [type specifier] [type qualifier] [type] [*] [type qualifier] [*] [type qualifier] [...] &lt;variable name&gt;</code></p>

<p>“Umm…” Yeah, I’ll get to it. Read on:</p>

<h3 id="declaration-modifiers">Declaration Modifiers</h3>

<p>There are two primary types of declaration modifiers: type qualifiers and storage classes, as well as a third. The third is a kind of “decorator” that in my words “details how <em>much</em> memory is being allocated for a given variable declaration” - it’s called a type <em>specifier</em>.</p>

<h4 id="type-qualifiers">Type Qualifiers</h4>
<p>Type qualifiers is basically you telling the compiler how you are going to use a given variable so that it can either perform optimizations on that variable to increase performance, prevent modification of them by anyone else (constants), or to ensure that you always have the most up-to-date information every time you access that variable (volatile). These are less common to see<sup id="fnref:2"><a href="#fn:2" rel="footnote">1</a></sup>. You can add type qualifiers to both types and pointers. More on <a href="http://www.idryman.org/blog/2012/10/29/type-qualifiers/">type qualifiers here</a> and <a href="http://www.eskimo.com/~scs/cclass/int/sx4ga.html">here</a>.</p>

<p><strong>Type qualifiers</strong> in C99 include:</p>

<ul>
  <li><code>const</code></li>
  <li><code>volatile</code></li>
  <li><code>restrict</code></li>
</ul>

<h4 id="type-specifiers">Type Specifiers</h4>
<p>Type specifiers are different in that they are basically just telling the compiler how many buckets of data to chunk out for a given variable to use. You can also use type specifiers as types themselves, such as <code>long int</code>, or <code>unsigned long double</code>.</p>

<p><strong>Type <em>specifiers</em></strong> include:</p>

<ul>
  <li><code>void</code></li>
  <li><code>char</code></li>
  <li><code>int</code></li>
  <li><code>unsigned</code></li>
  <li><code>signed</code></li>
  <li><code>long</code></li>
  <li><code>double</code></li>
  <li>etc. You get the idea.</li>
</ul>

<p>I know the least about type specifiers.</p>

<h4 id="storage-classes">Storage Classes</h4>
<p>Storage classes are special in that they tell the system <em>how</em> to allocate a given chunk of memory, in what scope that chunk of memory can be accessed, and the lifetime of those variables. More on <a href="http://www.lix.polytechnique.fr/~liberti/public/computing/prog/c/C/CONCEPT/storage_class.html">C storage classes here</a>.</p>

<p><strong>Storage classes</strong> include</p>

<ul>
  <li><code>static</code></li>
  <li><code>extern</code></li>
  <li><code>auto</code></li>
  <li><code>register</code></li>
</ul>

<p><em>Note: Certain pairs of storage classes are mutually exclusive with one another and cannot be used together. The same is true for type qualifiers. However, this is beyond the scope of this discussion - it’s just something to keep in mind.</em></p>

<p>Based on this new-found information, we can dissect our example above and explain why they are not the same, as well as introduce some deliberately complicated examples to show how to figure out how to interpret them.</p>

<h2 id="interpretingconstructing-variable-declarations">Interpreting/Constructing Variable Declarations</h2>
<p>Let’s look at the previous example to dissect how they are different. If I were reading an English sentence describing each variable declaration, it would go like this for each:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">const</span> <span class="n">NSString</span> <span class="o">*</span> <span class="n">myString</span><span class="p">;</span> <span class="c1">//The variable myString is a pointer to a constant NSString</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">myString</span><span class="p">;</span> <span class="c1">//The variable myString is a constant pointer to an NSString</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After reading the above, you can’t tell me you still think both of those variable declarations are the same. In fact, based on the above information, we could even construct a third similar-but-different variable declaration:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">const</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">myString</span> <span class="c1">//The variable myString is a constant pointer to a constant NSString</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So how did I perform this black magic? Simply read the variable declaration from the right to left, and when you get to the type, start reading left to right until you get back to the type. <a href="http://www.codeproject.com/Articles/7042/How-to-interpret-complex-C-C-declarations">Code Project has an excellent writeup</a> on reading complicated C declarations and <a href="http://ridiculousfish.com">ridiculous_fish</a> has an excellent conversion tool that will even <a href="http://cdecl.org">convert the declarations into English statements</a> right before your eyes. There are <a href="http://lmgtfy.com/?q=complicated+C+variable+declarations">tons of guides out there</a>. There are other complicated cases that involve array declarations and pointers, as well as comma-delimited declarations that I have yet to see in an Objective-C project (thank you) that can complicate a declaration.</p>

<h3 id="a-small-dash-of-cocoa">A Small Dash of Cocoa</h3>
<p>You may be thinking: “This is great and all, so why is this so important in Objective-C? I’ve never seen an <code>volatile unsigned long int * const</code> before in my life, and I’ve been writing in iOS since it began!”. While all of that may be true<sup id="fnref:3"><a href="#fn:3" rel="footnote">2</a></sup>, things got a little more complicated when Apple introduced ARC and blocks with Grand Central Dispatch.</p>

<h4 id="block-retain-cycles">Block Retain Cycles</h4>
<p>When Apple gave us blocks in iOS 4, it was a curse in disguise in terms of memory-management. <em>Everyone</em> loves blocks. <em>Everyone</em> tries to use blocks <em>everywhere</em>, but we’ll save that for another topic (hint: don’t forget about delegation and notifications).</p>

<p>Because of this, the dreaded retain cycle would rear it’s ugly head and engineers would end up scratching their heads if they even noticed it was happening. “Why is my view controller not being released when nothing else has a reference to it!” So you go and watch the WWDC videos on the introduction to blocks and GCD, and you discover the solution: <a href="http://developer.apple.com/library/ios/#documentation/cocoa/Conceptual/Blocks/Articles/bxVariables.html#//apple_ref/doc/uid/TP40007502-CH6-SW6"><code>__block</code></a>. Simply declaring your variables as <code>__block</code> will magically make “weak” references to your objects to use inside your blocks.</p>

<p>So we’d end up with this: </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__block</span> <span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">myself</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I would consider this incorrect even though more often than not, this will yield the result you want. This is an <em>inaccurate</em> use of <code>__block</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">3</a></sup>. <code>__block</code> is a <em>storage class</em> (like we discussed above) and is designed for variables that are going to be “created” inside the block so that memory can be allocated appropriately for use inside the block like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__block</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">self</span><span class="p">.</span><span class="n">completionBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">finished</span><span class="p">){</span>
</span><span class='line'>    <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this example, we’re creating a block variable outside of our block that is going to be modified inside said block. This is the correct way to use <code>__block</code>. To break our retain cycle, the more appropriate solution is to use some specific tools given to us in ARC that we’ll get to in just a second. First, an aside on new hotness in ARC to look out for:</p>

<h4 id="ownership-qualifiers">Ownership Qualifiers</h4>
<p>When using ARC, we now have even <em>more</em> qualifiers to look out for and use in our code. These ARC-specific qualifiers are called ownership qualifiers. Fitting, given that the primary function of ARC is to manage object lifetimes and ownership.</p>

<p>Ownership qualifiers in ARC include:</p>

<ul>
  <li><code>__autoreleasing</code></li>
  <li><code>__strong</code></li>
  <li><code>__unsafe_unretained</code></li>
  <li><code>__weak</code></li>
</ul>

<p>It’s important that your ownership qualifiers <a href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html%23//apple_ref/doc/uid/TP40011226-CH1-SW7">decorate your declarations properly</a>. ARC ownership qualifiers should decorate object pointers, not the object types (<code>MyVC * __weak weakVC = newVC</code>, NOT <code>MyVC __weak * weakVC = newVC</code>).</p>

<p>@idryman has a really <a href="http://www.idryman.org/blog/2012/10/29/type-qualifiers/#arc-ownership-qualifiers-1">concise writeup</a> on ARC ownership qualifiers, as well as explaining the improper use of them.</p>

<p><a href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html%23//apple_ref/doc/uid/TP40011226-CH1-SW7">From the documentation</a>:
<blockquote><p>You should decorate variables correctly. When using qualifiers in an object variable declaration, the correct format is:</p></p><p><p>ClassName * qualifier variableName;</p></p><p><p>for example:</p></p><p><p>MyClass * __weak myWeakReference;<br/>MyClass * __unsafe_unretained myUnsafeReference;</p></blockquote></p>

<h5 id="auto-niling-weak-references">Auto-Nil’ing Weak References</h5>
<p>In iOS 5, Apple gave us <a href="http://developer.apple.com/library/ios/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226-CH1-SW4">auto-nil’ing weak references</a> under ARC. This means that when you have a <em>weak</em> reference to a variable, it will allow you to use that variable and will set that variable to <code>nil</code> when no other object has a strong reference to it. This is a perfect place to replace the <code>__block</code> storage class with one of ARC’s new <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#ownership">ownership qualifiers</a>.  Let’s use <code>__weak</code>:</p>

<p><code>typeof(self) __weak myself = self</code></p>

<p>Viola! We now have an auto-nil’ing (auto-zeroing) weak reference to <code>self</code> that we can use in a block that <code>self</code> has a strong reference to without modifying where the object lives in memory:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">__weak</span> <span class="n">myself</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">self</span><span class="p">.</span><span class="n">completionBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">){</span>
</span><span class='line'>  <span class="p">[</span><span class="n">myself</span> <span class="nl">playWithObject:</span><span class="n">myself</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="ok-cool">Ok, Cool</h2>
<p>I think it’s important to understand the guts of a C declaration because of the small nuances that are present when you introduce things like ARC ownership qualifiers.  If you don’t know what a storage qualifier is, then you’re surely not going to know what an ownership qualifier is or how to properly use it. While it’s true for the most part that the compiler will generally let you know when something is awry, isn’t it nice to know that you know a little bit more about what the compiler is actually thinking when it tells you that retaining an object strongly in this context could result in a retain cycle?</p>

<hr />

<p>Misc Non-Inline References:</p>

<ol>
  <li><a href="http://www.lix.polytechnique.fr/~liberti/public/computing/prog/c/C/CONCEPT/storage_class.html">C Storage Classes</a></li>
  <li><a href="http://developer.apple.com/library/ios/documentation/cocoa/Conceptual/Blocks/Articles/bxVariables.html#//apple_ref/doc/uid/TP40007502-CH6-SW3">Blocks and Variables - Apple Docs</a></li>
  <li><a href="http://www.9wy.net/onlinebook/CPrimerPlus5/ch12lev1sec7.html">ANSI C Type Qualifiers - C Primer</a></li>
  <li><a href="http://www.mikeash.com/pyblog/friday-qa-2009-06-26-type-qualifiers-in-c-part-1.html">Friday Q&amp;A 2009-06-26: Type Qualifiers in C, Part 1 - Mike Ash</a></li>
</ol>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:2">
      <p>I’ve actually never seen <code>volatile</code> or <code>register</code> used anywhere in Objective-C<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>I don’t know many real-time systems that require constant volatile pointers compiled in Objective-C<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:1">
      <p>This is my opinion<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 6 "Smart" App Banners]]></title>
    <link href="http://theonlylars.com/blog/2012/09/29/ios-6-app-banners/"/>
    <updated>2012-09-29T21:34:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/09/29/ios-6-app-banners</id>
    <content type="html"><![CDATA[<p>When iOS 6 was announced, one of the lesser features was a “Smart” App Banner that displayed unobtrusively over your webpage and displayed an app that users could directly download on the app store from your webpage.  After the keynote, I forgot to investigate the documentation about it all through the iOS 6 Beta and never really heard much about it until the GM release of iOS 6.  So I went to check out how to do this thinking it was going to be super-involved, at least html-wise.</p>

<p>Are you ready?</p>

<p><code>html
&lt;meta name="apple-itunes-app" content="app-id=379660205"/&gt;
</code></p>

<p>That’s it.  Add this meta tag to the <code>&lt;head&gt;</code> section of your website template. Then, replace your app ID with the one iTunes Connect displays for your app in the app details.</p>

<p>If you’re on an iOS 6 device, then you will see this at the top of this webpage:</p>

<p><img class="center" src="/images/posts/smartbanners/droidlightbanner.png"></p>

<p>When the user taps on the banner, iOS will take the user to the app store to complete the transaction.  When the user returns to your website, a progress indicator will display showing the progress of the app install.  After the download and installation is complete, the banner’s action will launch the app.</p>

<p>You can even go one or two steps further and pass in affiliate link information when your app gets downloaded or have information passed to your app on first launch in the app’s url handling delegate method.  More detail can be found in the documentation on <a href="http://developer.apple.com/library/ios/#Documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html">Apple’s website</a>.</p>

<p>If you’re running an <a href="http://octopress.org">Octopress</a> blog and aren’t sure where to make this change to include it in your blog, mosey on over to <code>source\_includes\head.html</code> and add it in with the rest of the <code>&lt;meta</code> tags. </p>

<p>I’ve installed it on my blog with a link to <a href="http://itunes.apple.com/us/app/droid-light-customizable-flashlight/id379660205?ls=1&amp;mt=8">Droid Light</a>, since that’s the only personal app I have that actually moves any units on the app store.</p>
]]></content>
  </entry>
  
</feed>
