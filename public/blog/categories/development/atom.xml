<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | hello. i'm @theonlylars]]></title>
  <link href="http://theonlylars.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://theonlylars.com/"/>
  <updated>2012-07-02T23:48:53-05:00</updated>
  <id>http://theonlylars.com/</id>
  <author>
    <name><![CDATA[Lars Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ditching NSLog Part II: Good Tools Make Work Easy]]></title>
    <link href="http://theonlylars.com/blog/2012/07/05/ditching-nslog-advanced-ios-logging-part-2/"/>
    <updated>2012-07-05T21:49:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/07/05/ditching-nslog-advanced-ios-logging-part-2</id>
    <content type="html"><![CDATA[<h1>In Review</h1>

<p>In <a href="">Part 1</a> of this post, we introduced our good friend <code>NSLog</code> and why there is a time and a place for him, but those are few and far between.  We also discussed the different types of logging, and why you might want to use them, as well as how <code>NSLog</code> cannot satisfy these requirements.</p>

<p>In this post, we'll go over some of the options you have available in your developer tool-belt to make your life easier. I always tell myself that good tools (or even <em>the</em> proper tool) make building things much easier.  The same is true for building an app as it is for building my new bike I have sitting in pieces in the garage. Obtain the right tools, and you'll be more likely to produce a solid product.</p>

<h2>Logging Libraries</h2>

<h3>Macro Replacement</h3>

<p>http://iPhoneIncubator.com/blog/debugging/the-evolution-of-a-replacement-for-nslog</p>

<h3>Cocoa Lumberjack</h3>

<h3>NSLogger</h3>

<h3><a href="https://github.com/rentzsch/JRLog">JRLog</a></h3>

<h3><a href="https://github.com/holtwick/HOLog">HOLog</a></h3>

<h3><a href="https://github.com/shadowphoenix/OCLog">OCLog</a></h3>

<h3><a href="https://github.com/elegantchaos/ECLogging">ECLogging</a></h3>

<h2>Logging Enhancements for Debugging</h2>

<h3>AFHTTPRequestOperationLogger</h3>

<h3><a href="https://github.com/TouchCode/TouchLogging">TouchLogging</a></h3>

<h3><a href="https://github.com/Maxwin-z/XLog">XLog</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ditching NSLog Part I: You Deserve Better]]></title>
    <link href="http://theonlylars.com/blog/2012/07/02/ditching-nslog-advanced-ios-logging-part-1/"/>
    <updated>2012-07-02T21:35:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/07/02/ditching-nslog-advanced-ios-logging-part-1</id>
    <content type="html"><![CDATA[<p>Every iOS developer has used <code>NSLog</code>. We use it as a debugging tool to see the what data the system sees at a particular time while the application is running, or even the path our data takes when moving through our applications. But <code>NSLog</code> is not the be-all, end-all logging mechanism many of you think it is.</p>

<h2>I Use NSLog and I think it's awesome. Isn't that enough?</h2>

<p>Not really. Let me count the ways. You may think of <code>NSLog</code> as your awesome friend with the boat who lets you join him on the weekends, but in reality he's the slow guy in line paying for that Xbox with small coins and wadded singles when you just want to pay with plastic and <em>not</em> be standing in line.</p>

<h3>Speed</h3>

<p><code>NSLog</code> is slow. This wouldn't be so bad if it were asynchronous - but it is most definitely very synchronous. This is why you can set a breakpoint, step through your code and instantly see your <code>NSLog</code> statements show up in the console after you step over them. Make enough calls with <code>NSLog</code> in highly-iterative, performance-oriented or <code>drawRect:</code> code and the performance-penalty begins to add up.</p>

<!-- more -->


<h3>Conditional Logic</h3>

<p><code>NSLog</code> is dumb. There is only one type of <code>NSLog</code> - the type that will display in your console. Yet, we will use our logging statements for many different purposes. Sometimes we log an error, a UI event, maybe a networking call, other times we are simply keeping track of a view controller's view lifecycle. These are all very different types of logs that you may or may not want to show up all the time.</p>

<h3>Beyond Debugging</h3>

<p><code>NSLog</code> will show up even in production code regardless of release setting unless you deliberately do something about it. It will rear it's ugly head all up in your production code, even on-device when disconnected with the same performance-penalties as before, but now nobody can even see the logs unless they can connect to their device's console. This is serving zero purpose to aid the user's experience in your application.</p>

<p>I'm sure we've all done the genius find/replace <code>NSLog</code> with <code>//NSLog</code>. Yes, this gets rid of the NSLogs in production, but it is a huge pain to keep up with and looks ugly to boot. Then after you do this, the reverse action isn't always as straight-forward. There may be <code>NSLog</code>s that you intentionally wanted commented out that are now uncommented as a result of you trying to undo your previous strike of genius.</p>

<p>There is a time and place for production logging, but chances are pretty good that you aren't doing it right if you're still using <code>NSLog</code>. Next we'll go over the different types of logging, then discuss their role in debugging in both development <em>and</em> production after you ship your application to your users.</p>

<h2>Types of Logging</h2>

<h3>Console Logging</h3>

<p>This is the most basic type of logging, and one which you're probably most familiar with. The console log simply logs all of your statements to the debug log (if you're in Xcode or in the organizer) or to Console.app if you're running a mac app or running an app in the iPhone simulator detached from the debugger.</p>

<p><em>Practicality: <em>Production</em> (used correctly) or <em>development</em> debugging</em></p>

<h3>File Logging</h3>

<p>File logging is just like it sounds. Instead of logging to the debug console, you simply log to a file. This is best demonstrated by simply having you look in the <code>/var/log/</code> folder on your Mac or Linux box.  You'll see a plethora of file logs chock full of information about what is happening on your system.  For iOS, this really doesn't make sense for your sandboxed application unless we as the developers know that we need to monitor that information.</p>

<p>One example of this necessity is that a particular user is having an issue you've never even heard of before and you would like to capture the log output to see what is going on. Simply activate file logging by some super-secret menu (see Tweetbot screenshot below) and make an easy mechanism for the user to send you that log in an email. Just be responsible and don't log personal information and always remember to bound the length of your logs - nobody likes 100MB log files.</p>

<p><em>Practicality: <em>Production</em> debugging</em></p>

<h3>Remote Logging</h3>

<p>This is a little more difficult to accomplish and requires either some knowhow about client/server networking on a lower level than simply API consumption, or some help from a third party library.  The benefit to remote logging is that it combines all the best traits of console logging (real-time information) with file logging's ability to not have to be physically connected to the device in order to capture the logs. This would require some participation on the user's end, but if they're having extreme issues, they may be more than happy to let you remotely log their device while they demonstrate the bug for you.</p>

<p><em>Practicality: <em>Production</em> debugging (with a little more user participation)</em></p>

<h2>To Log, or Not to Log?</h2>

<p>So how often should include a log statement in their code?  When using the "right" logging techniques, you should log as much as possible. Some examples include:</p>

<ul>
<li>View/view controller life-cycles - calls to <code>viewDidLoad</code>, <code>dealloc</code>, etc.</li>
<li>Errors</li>
<li>Warnings</li>
<li>Unexpected user input</li>
<li>Whatevs</li>
</ul>


<p><span class='pullquote-right' data-pullquote='In not so many words: dynamic runtime logging'>The "right" logging techniques depends highly on who you are as a programmer and even moreso on where you work. I know we have very specific coding standards at <a href="http://mutualmobile.com">Mutual Mobile</a> so as to increase uniformity between codebases on disparate projects.  So the "right" logging techniques and practices I discuss here are those in which I believe most developers and users would benefit from. These practices are those in which you can dynamically choose which types of logs you would like to see depending on what you are working on.  In not so many words: dynamic runtime logging.</span></p>

<p>Dynamic means that it involves conditional logic, and mucking with the logging mechanism at runtime means preprocessor macros are pretty much out of the picture.  In Part 2, we'll look at some techniques as well as full-blown open source libraries that will make our job of logging much easier, more dynamic, and eliminate logs in production for all but the cases we specifically care about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easily Integrate Your iOS App with iAd and AdMob]]></title>
    <link href="http://theonlylars.com/blog/2012/04/27/integrating-google-ads-with-iad/"/>
    <updated>2012-04-27T21:30:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/04/27/integrating-google-ads-with-iad</id>
    <content type="html"><![CDATA[<p>I think Apple's iAds had great potential.  But let's face it.  They really aren't pulling the weight they should.  When they do have inventory, however, they often make much more than any other ad service.  Let me show you how to not only quickly integrate iAds into your app, but do it properly all while using Google's AdMob service as a backup.</p>

<p>If you watch Apple's WWDC video on proper integration of iAd or read the iAd implementation documentation, you will see that they want you to use a single shared instance of your ads in all of your view controllers.  Since I also wanted that instance to be backed by Google ads when there was no iAd inventory, the best solution I could think of was the singleton.  This lead me to:</p>

<h2>Introducing <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a></h2>

<p>I built <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a> in order to be a one-stop, single line integration of iAds (and later AdMob ads) into a <code>UIView</code>. I initially only supported iPods/iPhones in portrait orientation. It now has support for both iPods/iPhones as well as iPads in <em>any</em> orientation.</p>

<h2>Integrating <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a></h2>

<ol>
<li><p>First, you will need to clone the source from <a href="https://github.com/larsacus/LARSAdController">Github</a>:</p>

<p> <code>$ git clone git@github.com:larsacus/LARSAdController.git</code></p>

<p> or add it as a git submodule:</p>

<p> <code>$ git submodule add git@github.com:larsacus/LARSAdController.git Vendor/LARSAdController</code></p></li>
<li><p>Add folder or <code>LARSAdController.m/h</code> to your project</p></li>
<li>Download and copy the <a href="https://developers.google.com/mobile-ads-sdk/download#downloadios">Google ad SDK</a> into your project and go ahead and sign up for a Google publisher account at <a href="https://admob.com">AdMob.com</a> if you haven't already</li>
<li><p>Ensure the proper frameworks have been added to your application in order for iAds and AdMob ads to compile properly:</p>

<ol>
<li>iAd.framework</li>
<li>AudioToolbox.framework</li>
<li>MessageUI.framework</li>
<li>SystemConfiguration.framework</li>
</ol>


<p> You can add additional frameworks to your project in Xcode 4 by clicking on your project file in the project navigator on the left and going to <code>Build Phases &gt; Link Binary With Libraries &gt; Click + Symbol</code></p>

<p> Whew! What a lot of stupid setup and we haven't even written any code, yet! If you want to write code, you may be a little disappointed by this post, because there really isn't any.</p></li>
<li><p>Now go to <code>Product &gt; Build</code> or type '⌘+B' to build the project.  If your project builds without any errors, hurray! Skip to step 7.  If not, continue on...</p></li>
<li><span class='pullquote-right' data-pullquote='F, no, Objective-C, I don&#8217;t want ARC on this file!'>If you have errors and you followed the above <em>and</em> you're have ARC enabled, you will need to tell the compiler not to use ARC with <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a> as it is not supported, yet. Disable ARC on <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a> by following the same steps in step 4 to add frameworks to a project, but go to the <code>Compile Sources</code> section. Find <code>LARSAdController.m</code> in the list of files and double-click in the region to the right marked <code>Compiler Flags</code>. Add a new flag called <code>-fno-objc-arc</code>. A good way to remember this command is to read it like this: F, no, Objective-C, I don't want ARC on this file!.  Moving along... Hit '⌘+B' to verify everything is building correctly. </span></li>
<li><em>Now</em> we're ready to write some code! Get your typing fingers ready, because text doesn't just copy/paste itself! Add the following two lines of code to one of your view controller's view lifecycle load or appear methods.  I've found that <code>viewWillAppear:</code> seems to be the best when pushing/popping view controllers with ads on them:</li>
</ol>


<p>  <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="p">[[</span><span class="n">LARSAdController</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">addAdContainerToView:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">withParentViewController:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">LARSAdController</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">setGoogleAdPublisherId:</span><span class="n">myPublisherId</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>  If you are only supporting a single orientation, or a single set of orientations (portrait/upside down portrait), then you're basically done.  Just add the first single line of code to any view controller that you want to host ads in. Just be sure to call <code>setGoogleAdPublisherId:</code> the first time you add LARSAdController to a view. The ads will automatically be added to the bottom of the view and appear/hide whenever they have inventory available.</p>

<h2>Multiple Orientations</h2>

<p>If you would like to support multiple orientations, you will need to add the following line to the first call you make to add LARSAdController to a view:
``` objc</p>

<pre><code>[[LARSAdController sharedManager] setShouldHandleOrientationChanges:YES];
</code></pre>

<p>```</p>

<p>This will automatically listen for orientation changes and adjust the ad accordingly! See how easy that was! I told you if you were looking to type code, you were going to be disappointed.</p>

<p>Simply call the code in step 7 in any view you need the ad banner to be in, and it will automatically remove it from the old view and add it to the bottom of the new view.</p>

<h2>In Conclusion</h2>

<p>I think this is an extremely easy, proper way just to implement iAds into your app, even if you aren't using AdMob ads.  If you're registered to use AdMob ads, then it's an even <em>more</em> efficient method, as it's only one line of code more in order to integrate and you will <em>always</em> have an ad displaying in your app.</p>

<p>If you're using <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a> in your app, I'd love to know. You can send me an email if you can find it, <a href="http://github.com/larsacus/LARSAdController">fork the repo</a> and change the readme on GitHub, or even better, just send me a quick note at <a href="http://twitter.com/theonlylars">@theonlylars</a> and I'll add it to the README file.</p>
]]></content>
  </entry>
  
</feed>
