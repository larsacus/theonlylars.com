<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ARC | theonlylars]]></title>
  <link href="http://theonlylars.com/blog/categories/arc/atom.xml" rel="self"/>
  <link href="http://theonlylars.com/"/>
  <updated>2013-03-12T11:22:33-05:00</updated>
  <id>http://theonlylars.com/</id>
  <author>
    <name><![CDATA[Lars Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LARSAdController 3.0 RC]]></title>
    <link href="http://theonlylars.com/blog/2012/12/15/larsadcontroller-3-dot-0-rc/"/>
    <updated>2012-12-15T15:25:00-06:00</updated>
    <id>http://theonlylars.com/blog/2012/12/15/larsadcontroller-3-dot-0-rc</id>
    <content type="html"><![CDATA[<p><em>Edit Jan 10, 2013: Since publishing this post, <a href="/blog/2013/01/10/stupid-easy-ads-with-larsadcontroller-3-dot-0/">LARSAdController v3.0 has been pushed to the master branch</a> on <a href="https://github.com/larsacus/LARSAdController/">github</a>!</em></p>

<p>I’ve been working hard on refactoring <a href="https://github.com/larsacus/LARSAdController/tree/2.1.1">LARSAdController 2.0</a> into a more modular and maintainable state over the past few months. I think it’s finally in a place that could warrant some final testing from other developers before being merged into the master branch. </p>

<p>Let’s take a look at what’s changed:</p>

<h2 id="a-new-class-prefix">A New Class Prefix</h2>
<p>I’ve been using the class prefix <code>LARS</code> for all of my open-source classes. While this really is short and unique, it’s always felt pretty egotistical to have my name plastered all over my classes. This is just how I feel from this side of the keyboard. Does it look the same from the user’s end? Let me know what you think.</p>

<p>Anyway, I’ve migrated new classes to the new <code>TOL</code> prefix, for <a href="https://twitter.com/theonlylars">@<strong>T</strong>he<strong>O</strong>nly<strong>L</strong>ars</a>. This feels more anonymous and I haven’t seen the prefix used by anyone else before, yet. I’d love to know if someone well known <em>is</em> using the <code>TOL</code> class prefix. If I feel like I like this prefix better, I may just start using it for everything.</p>

<p>I also like that it sounds like “toll”. I have grand visions of having some cool project named <code>TOLBooth</code>, <code>TOLRoad</code>, or <code>TOLHouse</code>. I can’t think of practical project ideas to put those names on, however.</p>

<h2 id="modular-ad-networks">Modular Ad Networks</h2>
<p>The big new feature for this release is modular ad networks. Ad junkies will know this as ad mediation. AdMob has an ad mediation framework, so does AdWhirl, MobClix, and others. This is my implementation. The actual mediation logic is in a single .h/.m file pair. The other files support the ad networks. I feel this is a very lightweight implementation compared to other company’s mediation platforms, not to mention it’s open source so you can peek under the hood to see how another developer has solved a problem.</p>

<p>Right now I’ve built ad network adapters for iAds and AdMob ads. These are the only two ad networks that I use in Droid Light, so I don’t know much about others, and these two seem to be the most popular for banner ads on iOS.</p>

<h3 id="house-ads">House Ads</h3>
<p>A third planned adapter I’m particularly excited about is an adapter for “house” ads, <em>but I have not started on it as of yet</em>. House ads would basically amount to an image and a tap destination that you supply yourself. It’s an ad for yourself. <!-- more -->This will ideally be loaded dynamically from a remote server somewhere so you won’t have to upload a new binary to the app store every time you want to change the ads.</p>

<p>You could have this house ad link to another page in your app, have it load a remote URL for another app you have in the app store, or even let users know a new version is available. This would be able to be mediated in just like any other ad network.</p>

<p>This is not necessarily part of this release, but is something that is going to be at least started by then.</p>

<h3 id="additional-ad-networks">Additional Ad Networks</h3>
<p>Additional ad networks can be easily created by conforming your <code>NSObject</code> subclass to the <code>TOLAdAdapter</code> protocol. As long as you have logging enabled, I feel the warnings and assertions, as well as the header documentation have been well-built enough to make this a pretty painless process.</p>

<h3 id="priority">Priority</h3>
<p>You can now prioritize which ad network you would like to have highest priority. Version 2.0 and prior had their priority fixed to have iAds serve first and have AdMob ads slaved to display when there was no available iAd inventory to display.</p>

<p>This worked for the first couple years of iAd as the eCPM and fill rate was so much better than anything else. Since iAds are basically paying out on par or worse than AdMob ads with way worse fill rates, you may not want to have iAds be your highest priority network. This is now possible.</p>

<h2 id="arc">ARC</h2>
<p><code>LARSAdController</code> 3.0 is now ARC-enabled. You’re welcome.</p>

<h2 id="presentation-types--pinning-location">Presentation Types &amp; Pinning Location</h2>
<p>In 2.0 and prior versions, you were limited to only displaying the ad at the bottom of your view and having it slide from the bottom as your animation. Two new properties have been added on <code>LARSAdController</code>: <code>presentationType</code> and <code>pinningLocation</code>.</p>

<h3 id="presentationtype">presentationType</h3>
<p>You now have the option to change the animation sliding direction of your ads when a new ad is loaded and animated on screen. You can have it slide in from any edge. I thought about adding different transition types (flip, etc.), but thought it really unnecessary unless this is something other’s think they want.</p>

<h3 id="pinninglocation">pinningLocation</h3>
<p>You also now have the option to change the physical location that the ad container lives on screen. In addition to the good ol’ bottom of your view, you can pin the ad to the top of the view. This is not revolutionary.</p>

<h2 id="a-view-controller-subclass">A View Controller Subclass</h2>
<p>I’ve created a new view controller subclass that is the <em>easiest</em> method to integrating ads into your view controller’s view. For simple configurations, simply having your view controller inherit from <code>TOLAdViewController</code> will display an ad on <code>viewDidLoad:</code>, just like is suggested in the setup instructions. Literally no other work is needed from you in the simplest case.</p>

<h3 id="conditionally-display-ads">Conditionally Display Ads</h3>
<p>If you need to conditionally display ads while using the view controller subclass, overriding <code>shouldDisplayAds</code> will enable you to add some logic to determine if the subclass should add the ad container to your view or not. If you return <code>NO</code>, then nothing else is performed and no ad is added to your view hierarchy. The base implementation always returns <code>YES</code>.</p>

<p>I am dogfooding this view controller to myself in Droid Light, so it works for more than just the trivial implementations.</p>

<h2 id="debug-logging">Debug Logging</h2>
<p>I’ve added pretty extensive debug logging for what’s currently constructed. If something goes wrong, you should be able to tell <em>what</em> is going on and on what line in what file. Runtime warnings are unconditionally displayed regardless of debug log state and should probably be taken care of.</p>

<p>To enable logs, simple define the <code>LARSADCONTROLLER_DEBUG</code> macro somewhere.</p>

<h2 id="help">Help?</h2>
<p>I primarily created <code>LARSAdController</code> because I was unsatisfied with the big ad mediation networks. They also felt pretty heavyweight and a lot of overhead to simply run two mediated ad networks on my low-traffic app<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. This is my simple solution to theirs.</p>

<p>This post is primarily asking for a handful of people to clone, implement, and just see if they see anything awry with their particular implementation needs. Detailed code samples and changes are on the README on the project repo’s <a href="https://github.com/larsacus/LARSAdController/tree/3.0.0">tag</a>.</p>

<p>You can find the <a href="https://github.com/larsacus/LARSAdController/tree/3.0.0">3.0 tag here</a> and file <a href="https://github.com/larsacus/LARSAdController/issues">issues here</a>. Don’t be shy about issues. If it’s not a bug, but simply something you didn’t expect and want clarification, file an issue.</p>

<p>If you’re so inclined, let me know what you think: <a href="https://twitter.com/theonlylars">@theonlylars</a></p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>That and I <em>hate</em> when 3rd party libraries make me use the <code>-all_load</code> compiler flag<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Forget the "C" in Objective-C: C Declarations]]></title>
    <link href="http://theonlylars.com/blog/2012/12/10/dont-forget-the-c-in-objective-c/"/>
    <updated>2012-12-10T00:00:00-06:00</updated>
    <id>http://theonlylars.com/blog/2012/12/10/dont-forget-the-c-in-objective-c</id>
    <content type="html"><![CDATA[<p>It’s been awhile. I blame my bike and the Thanksgiving Steam sale. If you’re seriously reading this, then it is statistically likely your productivity was at some point affected by Steam’s Thanksgiving sale.</p>

<p>This post is going to primarily serve for my personal purposes to bookmark some articles and blog posts I’ve been referencing to remind myself some of the basics of C declarations while working in, as well as how they relate to Objective-C. This is going to be one of those posts that I’m probably going to add to as time goes on. This is also kind of a prelude to a future similarly-themed bookmarking post for myself on ARC.</p>

<p>Note also that while using very specific type and storage qualifiers can be unnecessary for most Objective-C development, Apple pretty much threw everyone into the fray when they introduced such common identifiers such as <code>__block</code> with Grand Central Dispatch. It got even better when ARC was introduced. You’ll see…</p>

<h2 id="variable-declaration">Variable Declaration</h2>

<h3 id="the-problem">The Problem</h3>
<p>This is something that was either not immediately obvious to me when writing software, or I simply was never formally shown this. I’m not entirely sure how I never picked up on this in all my years of writing software (even informally), but here it is:</p>

<p>This: <code>const NSString * myString</code> is totally not the same as this: <code>NSString * const myString</code>.</p>

<!--more-->

<p>Mind blown, right? If you asked either “Why are they not the same?” or “I don’t see a difference”, we’ll get to that in a sec. It all has to do with how the compiler interprets your variable declaration. The whole process is actually a lot more sophisticated and complicated than I’m about to explain it, but it’s essentially looking for variable declaration modifiers in the following format:</p>

<p><code>[storage class] [type specifier] [type qualifier] [type] [*] [type qualifier] [*] [type qualifier] [...] &lt;variable name&gt;</code></p>

<p>“Umm…” Yeah, I’ll get to it. Read on:</p>

<h3 id="declaration-modifiers">Declaration Modifiers</h3>

<p>There are two primary types of declaration modifiers: type qualifiers and storage classes, as well as a third. The third is a kind of “decorator” that in my words “details how <em>much</em> memory is being allocated for a given variable declaration” - it’s called a type <em>specifier</em>.</p>

<h4 id="type-qualifiers">Type Qualifiers</h4>
<p>Type qualifiers is basically you telling the compiler how you are going to use a given variable so that it can either perform optimizations on that variable to increase performance, prevent modification of them by anyone else (constants), or to ensure that you always have the most up-to-date information every time you access that variable (volatile). These are less common to see<sup id="fnref:2"><a href="#fn:2" rel="footnote">1</a></sup>. You can add type qualifiers to both types and pointers. More on <a href="http://www.idryman.org/blog/2012/10/29/type-qualifiers/">type qualifiers here</a> and <a href="http://www.eskimo.com/~scs/cclass/int/sx4ga.html">here</a>.</p>

<p><strong>Type qualifiers</strong> in C99 include:</p>

<ul>
  <li><code>const</code></li>
  <li><code>volatile</code></li>
  <li><code>restrict</code></li>
</ul>

<h4 id="type-specifiers">Type Specifiers</h4>
<p>Type specifiers are different in that they are basically just telling the compiler how many buckets of data to chunk out for a given variable to use. You can also use type specifiers as types themselves, such as <code>long int</code>, or <code>unsigned long double</code>.</p>

<p><strong>Type <em>specifiers</em></strong> include:</p>

<ul>
  <li><code>void</code></li>
  <li><code>char</code></li>
  <li><code>int</code></li>
  <li><code>unsigned</code></li>
  <li><code>signed</code></li>
  <li><code>long</code></li>
  <li><code>double</code></li>
  <li>etc. You get the idea.</li>
</ul>

<p>I know the least about type specifiers.</p>

<h4 id="storage-classes">Storage Classes</h4>
<p>Storage classes are special in that they tell the system <em>how</em> to allocate a given chunk of memory, in what scope that chunk of memory can be accessed, and the lifetime of those variables. More on <a href="http://www.lix.polytechnique.fr/~liberti/public/computing/prog/c/C/CONCEPT/storage_class.html">C storage classes here</a>.</p>

<p><strong>Storage classes</strong> include</p>

<ul>
  <li><code>static</code></li>
  <li><code>extern</code></li>
  <li><code>auto</code></li>
  <li><code>register</code></li>
</ul>

<p><em>Note: Certain pairs of storage classes are mutually exclusive with one another and cannot be used together. The same is true for type qualifiers. However, this is beyond the scope of this discussion - it’s just something to keep in mind.</em></p>

<p>Based on this new-found information, we can dissect our example above and explain why they are not the same, as well as introduce some deliberately complicated examples to show how to figure out how to interpret them.</p>

<h2 id="interpretingconstructing-variable-declarations">Interpreting/Constructing Variable Declarations</h2>
<p>Let’s look at the previous example to dissect how they are different. If I were reading an English sentence describing each variable declaration, it would go like this for each:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">const</span> <span class="n">NSString</span> <span class="o">*</span> <span class="n">myString</span><span class="p">;</span> <span class="c1">//The variable myString is a pointer to a constant NSString</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">myString</span><span class="p">;</span> <span class="c1">//The variable myString is a constant pointer to an NSString</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After reading the above, you can’t tell me you still think both of those variable declarations are the same. In fact, based on the above information, we could even construct a third similar-but-different variable declaration:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">const</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">myString</span> <span class="c1">//The variable myString is a constant pointer to a constant NSString</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So how did I perform this black magic? Simply read the variable declaration from the right to left, and when you get to the type, start reading left to right until you get back to the type. <a href="http://www.codeproject.com/Articles/7042/How-to-interpret-complex-C-C-declarations">Code Project has an excellent writeup</a> on reading complicated C declarations and <a href="http://ridiculousfish.com">ridiculous_fish</a> has an excellent conversion tool that will even <a href="http://cdecl.org">convert the declarations into English statements</a> right before your eyes. There are <a href="http://lmgtfy.com/?q=complicated+C+variable+declarations">tons of guides out there</a>. There are other complicated cases that involve array declarations and pointers, as well as comma-delimited declarations that I have yet to see in an Objective-C project (thank you) that can complicate a declaration.</p>

<h3 id="a-small-dash-of-cocoa">A Small Dash of Cocoa</h3>
<p>You may be thinking: “This is great and all, so why is this so important in Objective-C? I’ve never seen an <code>volatile unsigned long int * const</code> before in my life, and I’ve been writing in iOS since it began!”. While all of that may be true<sup id="fnref:3"><a href="#fn:3" rel="footnote">2</a></sup>, things got a little more complicated when Apple introduced ARC and blocks with Grand Central Dispatch.</p>

<h4 id="block-retain-cycles">Block Retain Cycles</h4>
<p>When Apple gave us blocks in iOS 4, it was a curse in disguise in terms of memory-management. <em>Everyone</em> loves blocks. <em>Everyone</em> tries to use blocks <em>everywhere</em>, but we’ll save that for another topic (hint: don’t forget about delegation and notifications).</p>

<p>Because of this, the dreaded retain cycle would rear it’s ugly head and engineers would end up scratching their heads if they even noticed it was happening. “Why is my view controller not being released when nothing else has a reference to it!” So you go and watch the WWDC videos on the introduction to blocks and GCD, and you discover the solution: <a href="http://developer.apple.com/library/ios/#documentation/cocoa/Conceptual/Blocks/Articles/bxVariables.html#//apple_ref/doc/uid/TP40007502-CH6-SW6"><code>__block</code></a>. Simply declaring your variables as <code>__block</code> will magically make “weak” references to your objects to use inside your blocks.</p>

<p>So we’d end up with this: </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__block</span> <span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">myself</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I would consider this incorrect even though more often than not, this will yield the result you want. This is an <em>inaccurate</em> use of <code>__block</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">3</a></sup>. <code>__block</code> is a <em>storage class</em> (like we discussed above) and is designed for variables that are going to be “created” inside the block so that memory can be allocated appropriately for use inside the block like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__block</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">self</span><span class="p">.</span><span class="n">completionBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">finished</span><span class="p">){</span>
</span><span class='line'>    <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In this example, we’re creating a block variable outside of our block that is going to be modified inside said block. This is the correct way to use <code>__block</code>. To break our retain cycle, the more appropriate solution is to use some specific tools given to us in ARC that we’ll get to in just a second. First, an aside on new hotness in ARC to look out for:</p>

<h4 id="ownership-qualifiers">Ownership Qualifiers</h4>
<p>When using ARC, we now have even <em>more</em> qualifiers to look out for and use in our code. These ARC-specific qualifiers are called ownership qualifiers. Fitting, given that the primary function of ARC is to manage object lifetimes and ownership.</p>

<p>Ownership qualifiers in ARC include:</p>

<ul>
  <li><code>__autoreleasing</code></li>
  <li><code>__strong</code></li>
  <li><code>__unsafe_unretained</code></li>
  <li><code>__weak</code></li>
</ul>

<p>It’s important that your ownership qualifiers <a href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html%23//apple_ref/doc/uid/TP40011226-CH1-SW7">decorate your declarations properly</a>. ARC ownership qualifiers should decorate object pointers, not the object types (<code>MyVC * __weak weakVC = newVC</code>, NOT <code>MyVC __weak * weakVC = newVC</code>).</p>

<p>@idryman has a really <a href="http://www.idryman.org/blog/2012/10/29/type-qualifiers/#arc-ownership-qualifiers-1">concise writeup</a> on ARC ownership qualifiers, as well as explaining the improper use of them.</p>

<p><a href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html%23//apple_ref/doc/uid/TP40011226-CH1-SW7">From the documentation</a>:
<blockquote><p>You should decorate variables correctly. When using qualifiers in an object variable declaration, the correct format is:</p></p><p><p>ClassName * qualifier variableName;</p></p><p><p>for example:</p></p><p><p>MyClass * __weak myWeakReference;<br/>MyClass * __unsafe_unretained myUnsafeReference;</p></blockquote></p>

<h5 id="auto-niling-weak-references">Auto-Nil’ing Weak References</h5>
<p>In iOS 5, Apple gave us <a href="http://developer.apple.com/library/ios/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226-CH1-SW4">auto-nil’ing weak references</a> under ARC. This means that when you have a <em>weak</em> reference to a variable, it will allow you to use that variable and will set that variable to <code>nil</code> when no other object has a strong reference to it. This is a perfect place to replace the <code>__block</code> storage class with one of ARC’s new <a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#ownership">ownership qualifiers</a>.  Let’s use <code>__weak</code>:</p>

<p><code>typeof(self) __weak myself = self</code></p>

<p>Viola! We now have an auto-nil’ing (auto-zeroing) weak reference to <code>self</code> that we can use in a block that <code>self</code> has a strong reference to without modifying where the object lives in memory:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">__weak</span> <span class="n">myself</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">self</span><span class="p">.</span><span class="n">completionBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">){</span>
</span><span class='line'>  <span class="p">[</span><span class="n">myself</span> <span class="nl">playWithObject:</span><span class="n">myself</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="ok-cool">Ok, Cool</h2>
<p>I think it’s important to understand the guts of a C declaration because of the small nuances that are present when you introduce things like ARC ownership qualifiers.  If you don’t know what a storage qualifier is, then you’re surely not going to know what an ownership qualifier is or how to properly use it. While it’s true for the most part that the compiler will generally let you know when something is awry, isn’t it nice to know that you know a little bit more about what the compiler is actually thinking when it tells you that retaining an object strongly in this context could result in a retain cycle?</p>

<hr />

<p>Misc Non-Inline References:</p>

<ol>
  <li><a href="http://www.lix.polytechnique.fr/~liberti/public/computing/prog/c/C/CONCEPT/storage_class.html">C Storage Classes</a></li>
  <li><a href="http://developer.apple.com/library/ios/documentation/cocoa/Conceptual/Blocks/Articles/bxVariables.html#//apple_ref/doc/uid/TP40007502-CH6-SW3">Blocks and Variables - Apple Docs</a></li>
  <li><a href="http://www.9wy.net/onlinebook/CPrimerPlus5/ch12lev1sec7.html">ANSI C Type Qualifiers - C Primer</a></li>
  <li><a href="http://www.mikeash.com/pyblog/friday-qa-2009-06-26-type-qualifiers-in-c-part-1.html">Friday Q&amp;A 2009-06-26: Type Qualifiers in C, Part 1 - Mike Ash</a></li>
</ol>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:2">
      <p>I’ve actually never seen <code>volatile</code> or <code>register</code> used anywhere in Objective-C<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>I don’t know many real-time systems that require constant volatile pointers compiled in Objective-C<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:1">
      <p>This is my opinion<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easily Integrate Your iOS App with iAd and AdMob]]></title>
    <link href="http://theonlylars.com/blog/2012/04/27/integrating-google-ads-with-iad/"/>
    <updated>2012-04-27T21:30:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/04/27/integrating-google-ads-with-iad</id>
    <content type="html"><![CDATA[<p><em>Edit Jan 10, 2013: Since publishing this post, <a href="/blog/2013/01/10/stupid-easy-ads-with-larsadcontroller-3-dot-0/">LARSAdController has been updated to v3.0</a>. A lot of the material below may be outdated. If you need to use v2.x as is demonstrated below, you can still access it using <a href="https://github.com/larsacus/LARSAdController/tree/2.1.1">one of the tagged v2.x versions on github</a>.</em></p>

<p>I think Apple’s iAds had great potential.  But let’s face it.  They really aren’t pulling the weight they should.  When they do have inventory, however, they often make much more than any other ad service.  Let me show you how to not only quickly integrate iAds into your app, but do it properly all while using Google’s AdMob service as a backup.</p>

<p>If you watch Apple’s WWDC video on proper integration of iAd or read the iAd implementation documentation, you will see that they want you to use a single shared instance of your ads in all of your view controllers.  Since I also wanted that instance to be backed by Google ads when there was no iAd inventory, the best solution I could think of was the singleton.  This lead me to:</p>

<h2 id="introducing-larsadcontrollerhttplarsacusgithubcomlarsadcontroller">Introducing <a href="http://larsacus.github.com/LARSAdController">LARSAdController</a></h2>
<p>I built <a href="http://larsacus.github.com/LARSAdController">LARSAdController</a> in order to be a one-stop, single line integration of iAds (and later AdMob ads) into a <code>UIView</code>. I initially only supported iPods/iPhones in portrait orientation. It now has support for both iPods/iPhones as well as iPads in <em>any</em> orientation.</p>

<h2 id="integrating-larsadcontrollerhttplarsacusgithubcomlarsadcontroller">Integrating <a href="http://larsacus.github.com/LARSAdController">LARSAdController</a></h2>
<ol>
  <li>
    <p>First, you will need to clone the source from <a href="http://larsacus.github.com/LARSAdController">Github</a>:</p>

    <p><code>$ git clone git@github.com:larsacus/LARSAdController.git</code></p>

    <p>or add it as a git submodule:</p>

    <p><code>$ git submodule add git@github.com:larsacus/LARSAdController.git Vendor/LARSAdController</code></p>
  </li>
  <li>Add folder or <code>LARSAdController.m/h</code> to your project</li>
  <li>Download and copy the <a href="https://developers.google.com/mobile-ads-sdk/download#downloadios">Google ad SDK</a> into your project and go ahead and sign up for a Google publisher account at <a href="https://admob.com">AdMob.com</a> if you haven’t already</li>
  <li>Ensure the proper frameworks have been added to your application in order for iAds and AdMob ads to compile properly:
    <ol>
      <li>iAd.framework</li>
      <li>AudioToolbox.framework</li>
      <li>MessageUI.framework</li>
      <li>SystemConfiguration.framework</li>
    </ol>

    <p>You can add additional frameworks to your project in Xcode 4 by clicking on your project file in the project navigator on the left and going to <code>Build Phases &gt; Link Binary With Libraries &gt; Click + Symbol</code></p>

    <p>Whew! What a lot of stupid setup and we haven’t even written any code, yet! If you want to write code, you may be a little disappointed by this post, because there really isn’t any.</p>
  </li>
  <li>Now go to <code>Product &gt; Build</code> or type ‘⌘+B’ to build the project.  If your project builds without any errors, hurray! Skip to step 7.  If not, continue on…</li>
  <li>Surround your pullquote like this {" text to be quoted "}</li>
  <li><em>Now</em> we’re ready to write some code! Get your typing fingers ready, because text doesn’t just copy/paste itself! Add the following two lines of code to one of your view controller’s view lifecycle load or appear methods.  I’ve found that <code>viewWillAppear:</code> seems to be the best when pushing/popping view controllers with ads on them:</li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span><span class="p">{</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">LARSAdController</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">addAdContainerToView:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">withParentViewController:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">LARSAdController</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">setGoogleAdPublisherId:</span><span class="n">myPublisherId</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you are only supporting a single orientation, or a single set of orientations (portrait/upside down portrait), then you’re basically done.  Just add the first single line of code to any view controller that you want to host ads in. Just be sure to call <code>setGoogleAdPublisherId:</code> the first time you add LARSAdController to a view. The ads will automatically be added to the bottom of the view and appear/hide whenever they have inventory available.</p>

<h2 id="multiple-orientations">Multiple Orientations</h2>

<p>If you would like to support multiple orientations, you will need to add the following line to the first call you make to add LARSAdController to a view:
<code>objc
    [[LARSAdController sharedManager] setShouldHandleOrientationChanges:YES];
</code></p>

<p>This will automatically listen for orientation changes and adjust the ad accordingly! See how easy that was! I told you if you were looking to type code, you were going to be disappointed.</p>

<p>Simply call the code in step 7 in any view you need the ad banner to be in, and it will automatically remove it from the old view and add it to the bottom of the new view.</p>

<h2 id="in-conclusion">In Conclusion</h2>
<p>I think this is an extremely easy, proper way just to implement iAds into your app, even if you aren’t using AdMob ads.  If you’re registered to use AdMob ads, then it’s an even <em>more</em> efficient method, as it’s only one line of code more in order to integrate and you will <em>always</em> have an ad displaying in your app.</p>

<p>If you’re using <a href="http://larsacus.github.com/LARSAdController">LARSAdController</a> in your app, I’d love to know. You can send me an email if you can find it, <a href="http://github.com/larsacus/LARSAdController">fork the repo</a> and change the readme on GitHub, or even better, just send me a quick note at <a href="http://twitter.com/theonlylars">@theonlylars</a> and I’ll add it to the README file.</p>

]]></content>
  </entry>
  
</feed>
