<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hello. i'm @theonlylars]]></title>
  <link href="http://theonlylars.com/atom.xml" rel="self"/>
  <link href="http://theonlylars.com/"/>
  <updated>2012-07-29T22:13:00-05:00</updated>
  <id>http://theonlylars.com/</id>
  <author>
    <name><![CDATA[Lars Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ditching NSLog, Part I: You Deserve Better]]></title>
    <link href="http://theonlylars.com/blog/2012/07/03/ditching-nslog-advanced-ios-logging-part-1/"/>
    <updated>2012-07-03T21:33:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/07/03/ditching-nslog-advanced-ios-logging-part-1</id>
    <content type="html"><![CDATA[<p>Every iOS developer has used <code>NSLog</code>. We use it as a debugging tool to see the what data the system sees at a particular time while the application is running, or even to track the path our data takes when moving through our applications. But <code>NSLog</code> is not the be-all, end-all logging mechanism many of you think it is.</p>

<p>If you&#8217;re new to iOS, you may want to sit this one out until you get annoyed by <code>NSLog</code> - then come back here and read this.</p>

<h2>I Use NSLog and I think it&#8217;s awesome. Isn&#8217;t that enough?</h2>

<p>Umm&#8230; Let me count the ways. You may think of <code>NSLog</code> as your awesome friend with the boat who lets you join him on the weekends, but in reality he&#8217;s that guy on a Friday afternoon at the bank who&#8217;s exchanging three years worth of saved coins and asking about the interest rates on free checking accounts. I hate that guy.</p>

<p>There are more forces at work than you might think operating behind the scenes in order to get your log messages to both the console and into Xcode console log. Let&#8217;s go over some of the issues I have with <code>NSLog</code>:</p>

<h3>Performance</h3>

<p><code>NSLog</code> is slow. This wouldn&#8217;t be so bad if it were asynchronous - but it is most definitely very synchronous. This is why you can set a breakpoint, step through your code and instantly see your <code>NSLog</code> statements show up in the console after you step over them. Make enough calls with <code>NSLog</code> in highly-iterative, performance-oriented or <code>drawRect:</code> code and the performance-penalty begins to add up. This is also not to say that we don&#8217;t sometimes need a synchronous logging mechanism. After all - if your code is in an unstable state, wouldn&#8217;t you want to know about both synchronously and immediately?</p>

<!-- more -->


<h4>Yeah? Prove it</h4>

<p><a href="https://github.com/robbiehanson/CocoaLumberjack/wiki/Performance"><code>NSLog</code>&#8217;s poor performance</a> is a result of a combination of a few different things. The gist of which is as follows:</p>

<ol>
<li>Open a new connection to ASL (Apple System Logger) daemon</li>
<li>Close that connection</li>
<li>Write that same message to STDERR</li>
<li>Do all of the above synchronously for each call to <code>NSLog</code></li>
</ol>


<p>As you will see in Part II of Ditching NSLog, some of the logging alternatives <a href="https://github.com/robbiehanson/CocoaLumberjack">can be faster than <code>NSLog</code> by an entire order of magnitude</a>!</p>

<h3>Conditional Logic</h3>

<p><code>NSLog</code> is dumb. There is only one type of <code>NSLog</code> - the type that will display in your console. Yet, we will use our logging statements for many different purposes. Sometimes we log an error, a UI event, maybe a networking call, other times we are simply keeping track of a view controller&#8217;s view lifecycle. These are all very different types of logs that you may or may not want to show up all the time.</p>

<p>Wouldn&#8217;t it be nice if we could simply set a flag and <em>only</em> see our view lifecycle log statements? Think about that.</p>

<h3>Beyond Development</h3>

<p><code>NSLog</code> will show up even in your production code regardless of release setting unless you deliberately do something about it. It&#8217;s not like <code>NSAssert</code>, which will simply get stripped out in release mode. It will rear it&#8217;s ugly head all up on your user&#8217;s devices with the same performance-penalties as before, but now nobody can even see the logs unless they can connect to their device&#8217;s console. This is serving zero purpose to aid the user&#8217;s experience in your application.</p>

<p>To resolve this, I&#8217;m sure we&#8217;ve all done the genius find/replace <code>NSLog</code> with <code>//NSLog</code> at least once in our careers. Yes, this technically gets rid of the <code>NSLog</code>s in production, but it is a huge pain to keep up with and looks ugly to boot. Then after you do this, the reverse action isn&#8217;t always as straight-forward. There may be <code>NSLog</code>s that you intentionally wanted commented out that are now uncommented as a result of you trying to undo your previous strike of genius. Just don&#8217;t do it.  <a href="http://stackoverflow.com/a/969291">Use a conditional macro</a> if you want some basic control over compile-time removal of <code>NSLog</code> in production.</p>

<p>There is a time and place for production logging, but chances are pretty good that you aren&#8217;t doing it right if you&#8217;re still using <code>NSLog</code>. Next we&#8217;ll go over the different types of logging methodologies, then discuss their role in debugging in both development <em>and</em> production after you ship your application to your users. That&#8217;s right - <em>production</em> logging!</p>

<h2>Types of Logging</h2>

<h3>Console Logging</h3>

<p>This is the most basic type of logging, and one which you&#8217;re probably most familiar with. The console log simply logs all of your statements to the debug log (if you&#8217;re in Xcode or in the organizer) or to Console.app if you&#8217;re running a mac app or running an app in the iPhone simulator detached from the debugger.</p>

<p><em><strong>Practicality</strong>: <em>Production</em> (used correctly) or <em>development</em> debugging</em></p>

<h3>File Logging</h3>

<p>File logging is just like it sounds. Instead of logging to the debug console, you simply log to a file. This is best demonstrated by simply having you look in the <code>/var/log/</code> folder on your Mac or Linux box.  You&#8217;ll see a plethora of file logs chock full of information about what is happening on your system.  For iOS, this really doesn&#8217;t make sense for your sandboxed application unless we as the developers know that we need to monitor that information.</p>

<p><img class="left" src="http://theonlylars.com/images/posts/nslog/part1/tweetbot_super_secret.png" width="300" title="Tweetbot's super-secret settings menu" ></p>

<p>One example of this necessity is that a particular user is having an issue you&#8217;ve never even heard of before and you would like to capture the log output to see what is going on. Simply activate file logging by some super-secret menu and make an easy mechanism for the user to send you that log in an email. Just be responsible and don&#8217;t log personal information and always remember to bound the length of your logs - nobody likes 100MB log files.</p>

<p><em><strong>Practicality</strong>: <em>Production</em> debugging</em></p>

<h3>Remote Logging</h3>

<p>This is a little more difficult to accomplish and requires either some knowhow about client/server networking on a lower level than simply API consumption, or some help from a third party library.  The benefit to remote logging is that it combines all the best traits of console logging (real-time information) with file logging&#8217;s ability to not have to be physically connected to the device in order to capture the logs. This would require some participation on the user&#8217;s end, but if they&#8217;re having extreme issues, they may be more than happy to let you remotely log their device while they demonstrate the bug for you.</p>

<p><em><strong>Practicality</strong>: <em>Production</em> debugging (with a little more user participation)</em></p>

<h2>To Log, or Not to Log?</h2>

<p>So how often should include a log statement in their code?  When using the &#8220;right&#8221; logging techniques, you should log as much as possible. Some examples include:</p>

<ul>
<li>View/view controller life-cycles - calls to <code>viewDidLoad</code>, <code>dealloc</code>, etc.</li>
<li>Errors</li>
<li>Warnings</li>
<li>Unexpected user input</li>
<li>Whatevs</li>
</ul>


<p><span class='pullquote-right' data-pullquote='In not so many words: dynamic runtime logging'>The &#8220;right&#8221; logging techniques depends highly on who you are as a programmer and even moreso on where you work. I know we have very specific coding standards at <a href="http://mutualmobile.com">Mutual Mobile</a> so as to increase uniformity between codebases on disparate projects.  So the &#8220;right&#8221; logging techniques and practices I discuss here are those in which I believe most developers and users would benefit from. These practices are those in which you can dynamically choose which types of logs you would like to see depending on what you are working on.  In not so many words: dynamic runtime logging.</span></p>

<p>Dynamic means that it involves conditional logic, and mucking with the logging mechanism at runtime means preprocessor macros are pretty much out of the picture.  In Part 2, we&#8217;ll look at some techniques as well as full-blown open source libraries that will make our job of logging much easier, more dynamic, and eliminate logs in production for all but the cases we specifically care about.</p>

<h2>Conclusion</h2>

<p><code>NSLog</code> is our dear old friend. We&#8217;ve fixed a lot of bugs using <code>NSLog</code>. But now it&#8217;s time to grow up. We&#8217;ve found out why <code>NSLog</code> really isn&#8217;t all that great, some other ways in which we can utilize logs in different formats, as well as how we can use those logs in production as well as development! Now lets build some stuff!</p>

<p><strong>Check out Part II of Ditching NSLog to see how you can make your application logging work better for you!</strong></p>

<hr />

<p><em>Disclaimer:</em>
<em>I don&#8217;t pretend to know every nook and cranny about the topics I discuss.  I find teaching others is the best learning tool - and I like to learn.  As a result, you may disagree or *gasp* find errors.  If you disagree with any of this, write me a note at <a href="https://twitter.com/theonlylars">@theonlylars</a> and let me know. I&#8217;ll either correct it or simply agree to disagree.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post-WWDC]]></title>
    <link href="http://theonlylars.com/blog/2012/06/27/post-wwdc/"/>
    <updated>2012-06-27T23:34:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/06/27/post-wwdc</id>
    <content type="html"><![CDATA[<p>WWDC was a ton of fun.  One of my coworkers equated it to drinking from a fire-hose all week, and that&#8217;s exactly what it was like - hardly any time to process any of what you&#8217;re taught all week. The sessions were really good, being surrounded by others who do what you do was inspiring, and the labs gave me access to Apple engineers to ask them whatever I wanted.  I got some really good feedback on my <a href="https://github.com/larsacus/LARSAdController">iOS ad integration class</a>, as well as some help integrating auto layout with some existing projects. There is a ton of material that is not mentioned in the videos (and sometimes even in the documentation) about how a class functions or was built. This is when access to the engineers that actually build the API is infinitely useful.  I&#8217;ll definitely be more prepared next year.</p>

<p>For those wondering, the WWDC minty boost <em>did</em> in fact work to charge my devices (which was totally necessary every single day), but heated up the AA&#8217;s due to the current draw and re-melted the hot-glue that was protecting the PCB to the battery chassis. I only got one use out of it, but really didn&#8217;t need it any longer once you know to plug your phone in to charge at every opportunity.</p>

<p>It also humbles me as an engineer to be surrounded by so many people from all over the world who have gone on to do such publicly &#8220;great&#8221; things by comparison to what I feel like I&#8217;ve done.  Most of the work I do can&#8217;t be shown to anyone else as <em>my</em> work, so I often find myself longing for a very public application or open source project to put my name on. Something I can say that <em>I</em> built or had a significant impact in building and it&#8217;s something that millions of others love and find useful. All good things come in time to those who work hard, so we&#8217;ll see where the next few years takes me. But for someone who really likes being openly proud of his work instead of just knowing intrinsically that I worked on something public, private white-label consulting is difficult for me - at least in that way. I&#8217;m not entirely sure how I would do in a single-project setting where the company I worked for <em>was</em> the product and I wasn&#8217;t able to bounce around multiple projects if I wanted to, but I&#8217;m sure I would manage just fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minty Boost! DubDub Edition]]></title>
    <link href="http://theonlylars.com/blog/2012/06/04/minty-boost-dubdub-edition/"/>
    <updated>2012-06-04T23:46:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/06/04/minty-boost-dubdub-edition</id>
    <content type="html"><![CDATA[<p>Of all of the lists I have read about what to bring with you to WWDC, or suggestions on what veterans say you should do, the most consistent and unanimously present suggestion from all sources is that you will need to extend the battery life of your mobile device.  In the case of WWDC, there is a 99.99 (repeating, of course)% chance that it will be an iPhone. Being a procrastinator, I did not order one online like I should have from monoprice or similar.  Being a cheap, stingy software engineer, I refused to pay between $60-$100 for similar Li-Ion battery packs that carry anywhere from 3000-6500mAh of power. Being an electrical engineer by schooling, you tend to have <a href="http://www.ladyada.net/make/mintyboost/">stuff like this lying around the house</a>. Specifically, I had the minty boost powering an Arduino/Xbee assembly that is feeding temperature data from my HVAC exaust to Cosm.  You can read all about <em>that</em> <a href="http://theonlylars.com/homedata">here</a>. It ultimately didn&#8217;t work for this application due to it&#8217;s limited supply time (only lasted about 6 hours at a time).</p>

<p><img class="center" src="http://theonlylars.com/images/posts/mintyboost/minty-boost-1.jpg"> This will enable me to use two rechargeable AA batteries at a time to at least get my iDevice back on it&#8217;s feet. I don&#8217;t intend for this to get me to a full charge, but it should suffice to get me to the next wall outlet.</p>

<p>Also, since Altoids does not make the Altoids gum that the Minty Boost was originally designed for, I had to improvise using some engineering magic:</p>

<p><img class="center" src="http://theonlylars.com/images/posts/mintyboost/minty-boost-2.jpg">
This Eclipse mints container works perfectly for the Minty Boost, even if I did have to reverse the lid to get it to fit.</p>

<p>According to the battery rating, as well as the specs on the <a href="http://www.ifixit.com/Teardown/iPhone-4-Teardown/3130/1#s15307">iPhone&#8217;s battery</a> and <a href="http://www.ladyada.net/make/mintyboost/power.html">Adafruit&#8217;s own website</a>, I should be able to get about half a charge on two high-capacity NiMH AA batteries (the green Energizers shown above):</p>

<p>Input: <code>2 * 1.2V * 2450mAh * 80% = 4704 mWh</code></p>

<p>Output: <code>4704mWh/5V * 80% = 753 mAh</code></p>

<p>Charges: <code>1420 mAh iPhone 4 Capacity / 753 mAh = ~1/2</code> charge of iPhone 4 on two fresh AA rechargeable batteries</p>

<p>Good enough, I say.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[House Status]]></title>
    <link href="http://theonlylars.com/blog/2012/06/03/house-status/"/>
    <updated>2012-06-03T23:12:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/06/03/house-status</id>
    <content type="html"><![CDATA[<p>Just put up a new page that will be home to the status of all house gadgets that can have a status. Some things I&#8217;d eventually like to have in it are things like NAS status, A/C temperatures, ambient temperatures, light levels, computer status, electrical power consumption, etc. For now, all you&#8217;re gonna get is a rant about <a href="http://theonlylars.com/homedata">how hot my apartment is</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dub Dub]]></title>
    <link href="http://theonlylars.com/blog/2012/05/29/wwdc/"/>
    <updated>2012-05-29T22:19:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/05/29/wwdc</id>
    <content type="html"><![CDATA[<p>Gettin&#8217; ready for <a href="http://www.apple.com/wwdc">dub dub</a> in less than two weeks! By my count, there are 42 &#8220;To be announced&#8221; sessions on the schedule released today. You will find me at as many Core Animation, Core Graphics, and GCD sessions as I can attend, as well as all of the cool new API sessions.  To make the most of it all, I&#8217;ve been trying to think of some good questions for the framework engineers at the labs.  I&#8217;ll probably get some feedback on my <a href="https://github.com/larsacus/LARSAdController">ad controller</a>, as well as a new MBProgressHUD/SVProgressHUD-inspired HUD I&#8217;ve been working on at work, in addition to some other various work-related stuff.</p>

<p>Some new API&#8217;s stuffs I&#8217;m thinking/hoping we may see fill in the &#8216;to be announced&#8217; blanks during the keynote:</p>

<ol>
<li>Easier iCloud integration (don&#8217;t tell me you haven&#8217;t tried to integrate iCloud without issue)</li>
<li>Notification Center widgets (I would even settle for a useful Notification Center)</li>
<li>New maps APIs (<a href="http://www.macrumors.com/2012/05/29/composite-mockup-of-ios-6-maps-app-based-on-purported-leaked-screenshots/">Exhibit A</a>)</li>
<li>More Core Image filters for iOS</li>
<li>Fully-baked Siri (I don&#8217;t necessarily think we&#8217;ll see app-level Siri integration, just yet)</li>
<li>Airplay<->Mac integration</li>
<li>Heck, I&#8217;m thinking there will be more generic OS-level mac-integration (think Airdrop)</li>
<li>More twitter-like account integrations</li>
<li>A new system-wide visual overhaul (not likely, but it&#8217;s been since iOS 4 that the look has changed in any way, and even that was minor)</li>
</ol>


<p>We&#8217;ll see how it all plays out.  I&#8217;ll be tweeting about it the whole time, NDA permitting, if you care to <a href="https://twitter.com/theonlylars">follow along</a>.</p>

<p>If you&#8217;re fortunate enough to be joining us all, then I&#8217;ll see you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Career Day @ Lorena High]]></title>
    <link href="http://theonlylars.com/blog/2012/05/17/career-day-at-lorena-high/"/>
    <updated>2012-05-17T21:27:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/05/17/career-day-at-lorena-high</id>
    <content type="html"><![CDATA[<p>Huge shout out to all the high schoolers at <a href="http://lorenaisd.net">Lorena High School</a> that put up with my chatter about how cool my job is this morning. You guys were awesome.</p>

<p>If you&#8217;re looking for the presentation, you can find it on <a href="https://github.com/larsacus/career-day">here on my github page</a>. It&#8217;s available in powerpoint, keynote, and just plain old pdf. If you have any questions, you can <a href="https://twitter.com/theonlylars">find me on Twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easily Integrate Your iOS App with iAd and AdMob]]></title>
    <link href="http://theonlylars.com/blog/2012/04/27/integrating-google-ads-with-iad/"/>
    <updated>2012-04-27T21:30:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/04/27/integrating-google-ads-with-iad</id>
    <content type="html"><![CDATA[<p>I think Apple&#8217;s iAds had great potential.  But let&#8217;s face it.  They really aren&#8217;t pulling the weight they should.  When they do have inventory, however, they often make much more than any other ad service.  Let me show you how to not only quickly integrate iAds into your app, but do it properly all while using Google&#8217;s AdMob service as a backup.</p>

<p>If you watch Apple&#8217;s WWDC video on proper integration of iAd or read the iAd implementation documentation, you will see that they want you to use a single shared instance of your ads in all of your view controllers.  Since I also wanted that instance to be backed by Google ads when there was no iAd inventory, the best solution I could think of was the singleton.  This lead me to:</p>

<h2>Introducing <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a></h2>

<p>I built <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a> in order to be a one-stop, single line integration of iAds (and later AdMob ads) into a <code>UIView</code>. I initially only supported iPods/iPhones in portrait orientation. It now has support for both iPods/iPhones as well as iPads in <em>any</em> orientation.</p>

<h2>Integrating <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a></h2>

<ol>
<li><p>First, you will need to clone the source from <a href="https://github.com/larsacus/LARSAdController">Github</a>:</p>

<p> <code>$ git clone git@github.com:larsacus/LARSAdController.git</code></p>

<p> or add it as a git submodule:</p>

<p> <code>$ git submodule add git@github.com:larsacus/LARSAdController.git Vendor/LARSAdController</code></p></li>
<li><p>Add folder or <code>LARSAdController.m/h</code> to your project</p></li>
<li>Download and copy the <a href="https://developers.google.com/mobile-ads-sdk/download#downloadios">Google ad SDK</a> into your project and go ahead and sign up for a Google publisher account at <a href="https://admob.com">AdMob.com</a> if you haven&#8217;t already</li>
<li><p>Ensure the proper frameworks have been added to your application in order for iAds and AdMob ads to compile properly:</p>

<ol>
<li>iAd.framework</li>
<li>AudioToolbox.framework</li>
<li>MessageUI.framework</li>
<li>SystemConfiguration.framework</li>
</ol>


<p> You can add additional frameworks to your project in Xcode 4 by clicking on your project file in the project navigator on the left and going to <code>Build Phases &gt; Link Binary With Libraries &gt; Click + Symbol</code></p>

<p> Whew! What a lot of stupid setup and we haven&#8217;t even written any code, yet! If you want to write code, you may be a little disappointed by this post, because there really isn&#8217;t any.</p></li>
<li><p>Now go to <code>Product &gt; Build</code> or type &#8216;⌘+B&#8217; to build the project.  If your project builds without any errors, hurray! Skip to step 7.  If not, continue on&#8230;</p></li>
<li><span class='pullquote-right' data-pullquote='F, no, Objective-C, I don&#8217;t want ARC on this file!'>If you have errors and you followed the above <em>and</em> you&#8217;re have ARC enabled, you will need to tell the compiler not to use ARC with <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a> as it is not supported, yet. Disable ARC on <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a> by following the same steps in step 4 to add frameworks to a project, but go to the <code>Compile Sources</code> section. Find <code>LARSAdController.m</code> in the list of files and double-click in the region to the right marked <code>Compiler Flags</code>. Add a new flag called <code>-fno-objc-arc</code>. A good way to remember this command is to read it like this: F, no, Objective-C, I don&#8217;t want ARC on this file!.  Moving along&#8230; Hit &#8216;⌘+B&#8217; to verify everything is building correctly. </span></li>
<li><em>Now</em> we&#8217;re ready to write some code! Get your typing fingers ready, because text doesn&#8217;t just copy/paste itself! Add the following two lines of code to one of your view controller&#8217;s view lifecycle load or appear methods.  I&#8217;ve found that <code>viewWillAppear:</code> seems to be the best when pushing/popping view controllers with ads on them:</li>
</ol>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span><span class="p">{</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">LARSAdController</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">addAdContainerToView:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">withParentViewController:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">LARSAdController</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">setGoogleAdPublisherId:</span><span class="n">myPublisherId</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>  If you are only supporting a single orientation, or a single set of orientations (portrait/upside down portrait), then you&#8217;re basically done.  Just add the first single line of code to any view controller that you want to host ads in. Just be sure to call <code>setGoogleAdPublisherId:</code> the first time you add LARSAdController to a view. The ads will automatically be added to the bottom of the view and appear/hide whenever they have inventory available.</p>

<h2>Multiple Orientations</h2>

<p>If you would like to support multiple orientations, you will need to add the following line to the first call you make to add LARSAdController to a view:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">LARSAdController</span> <span class="n">sharedManager</span><span class="p">]</span> <span class="nl">setShouldHandleOrientationChanges:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will automatically listen for orientation changes and adjust the ad accordingly! See how easy that was! I told you if you were looking to type code, you were going to be disappointed.</p>

<p>Simply call the code in step 7 in any view you need the ad banner to be in, and it will automatically remove it from the old view and add it to the bottom of the new view.</p>

<h2>In Conclusion</h2>

<p>I think this is an extremely easy, proper way just to implement iAds into your app, even if you aren&#8217;t using AdMob ads.  If you&#8217;re registered to use AdMob ads, then it&#8217;s an even <em>more</em> efficient method, as it&#8217;s only one line of code more in order to integrate and you will <em>always</em> have an ad displaying in your app.</p>

<p>If you&#8217;re using <a href="https://github.com/larsacus/LARSAdController">LARSAdController</a> in your app, I&#8217;d love to know. You can send me an email if you can find it, <a href="http://github.com/larsacus/LARSAdController">fork the repo</a> and change the readme on GitHub, or even better, just send me a quick note at <a href="http://twitter.com/theonlylars">@theonlylars</a> and I&#8217;ll add it to the README file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[check out my new crib]]></title>
    <link href="http://theonlylars.com/blog/2012/04/26/check-out-my-new-crib/"/>
    <updated>2012-04-26T19:51:00-05:00</updated>
    <id>http://theonlylars.com/blog/2012/04/26/check-out-my-new-crib</id>
    <content type="html"><![CDATA[<p>I&#8217;ve had this domain for awhile, but haven&#8217;t had the time to build a website the way I like.  I wanted a blog that accepted markdown as text input, as well as some other social-media integration features, so imagine how intrigued I was to find <a href="http://octopress.org">Octopress</a>, which supported exactly this.  And since it&#8217;s basically just a rack/sinatra app, it should be pretty easy for me to modify it how I want.</p>

<p>More to come.</p>
]]></content>
  </entry>
  
</feed>
